package com.onudapps.proman.contracts;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Int32;
import org.web3j.abi.datatypes.generated.Int64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.*;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class ProManSmartContract extends Contract {
    private static final String BINARY = "0x6080604052600080546001608060020a031916905534801561002057600080fd5b50613dcd806100306000396000f3fe6080604052600436106101c05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166280f19781146101c55780631274290214610284578063381468e8146103d0578063385e17db146104b657806339d2ff17146104e557806347278ab61461066557806354272d941461069b5780635bc4ec8b146106c95780635be13890146106de5780636320b3f81461079b57806365fca2d9146107d75780636a5baba1146108135780637837620f146108df5780637b1b664a1461091b5780637dc03f74146109c357806380caf07d146109d857806384dc388614610a95578063884eaab514610b1657806389406afe14610b2b5780639e4cda4314610b61578063ac85f7f714610b8a578063adcfb4fc14610ccf578063b772cbb914610d82578063bf4a246714610dbe578063c6168e1114610e7b578063cb9d8c5c14610eb7578063ce8823a514610f6a578063cfcef2d214611027578063d7d3d02b14611054578063dd583bce1461108a578063de0040be146110c0578063e7783717146110fc578063eac25d8114611133578063f60c505f14611198578063f8f3378e146111d4578063fc0a5e9114611201575b600080fd5b3480156101d157600080fd5b506101f2600480360360208110156101e857600080fd5b503560030b61122e565b60405180806020018460070b60070b81526020018360070b60070b8152602001828103825285818151815260200191508051906020019080838360005b8381101561024757818101518382015260200161022f565b50505050905090810190601f1680156102745780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561029057600080fd5b506102b1600480360360208110156102a757600080fd5b503560030b611465565b604051808860030b60030b815260200180602001806020018760070b60070b81526020018660070b60070b81526020018560030b60030b81526020018460030b60030b8152602001838103835289818151815260200191508051906020019080838360005b8381101561032e578181015183820152602001610316565b50505050905090810190601f16801561035b5780820380516001836020036101000a031916815260200191505b5083810382528851815288516020918201918a019080838360005b8381101561038e578181015183820152602001610376565b50505050905090810190601f1680156103bb5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b3480156103dc57600080fd5b506103fd600480360360208110156103f357600080fd5b503560030b6115e1565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561043e578181015183820152602001610426565b50505050905090810190601f16801561046b5780820380516001836020036101000a031916815260200191505b508381038252845181528451602091820191808701910280838360005b838110156104a0578181015183820152602001610488565b5050505090500194505050505060405180910390f35b3480156104c257600080fd5b506104e3600480360360208110156104d957600080fd5b503560030b611797565b005b3480156104f157600080fd5b506105126004803603602081101561050857600080fd5b503560030b6117ec565b6040518080602001806020018860070b60070b81526020018760070b60070b81526020018660030b60030b81526020018560030b60030b81526020018060200184810384528b818151815260200191508051906020019080838360005b8381101561058757818101518382015260200161056f565b50505050905090810190601f1680156105b45780820380516001836020036101000a031916815260200191505b5084810383528a5181528a516020918201918c019080838360005b838110156105e75781810151838201526020016105cf565b50505050905090810190601f1680156106145780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b83811015610649578181015183820152602001610631565b505050509050019a505050505050505050505060405180910390f35b34801561067157600080fd5b506104e36004803603604081101561068857600080fd5b50803560030b906020013560070b611aa7565b3480156106a757600080fd5b506106b0611b45565b60408051600392830b90920b8252519081900360200190f35b3480156106d557600080fd5b506106b0611b56565b3480156106ea57600080fd5b506104e36004803603604081101561070157600080fd5b813560030b919081019060408101602082013564010000000081111561072657600080fd5b82018360208201111561073857600080fd5b8035906020019184600183028401116401000000008311171561075a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611b5f945050505050565b3480156107a757600080fd5b506104e3600480360360408110156107be57600080fd5b50600160a060020a03813516906020013560030b611bd9565b3480156107e357600080fd5b506104e3600480360360408110156107fa57600080fd5b50803560030b9060200135600160a060020a0316611d55565b34801561081f57600080fd5b506108406004803603602081101561083657600080fd5b503560030b611f74565b604051808560030b60030b8152602001806020018460070b60070b81526020018360070b60070b8152602001828103825285818151815260200191508051906020019080838360005b838110156108a1578181015183820152602001610889565b50505050905090810190601f1680156108ce5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156108eb57600080fd5b506104e36004803603604081101561090257600080fd5b50803560030b9060200135600160a060020a031661203c565b34801561092757600080fd5b5061094e6004803603602081101561093e57600080fd5b5035600160a060020a031661225f565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610988578181015183820152602001610970565b50505050905090810190601f1680156109b55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109cf57600080fd5b506106b0612329565b3480156109e457600080fd5b506104e3600480360360408110156109fb57600080fd5b813560030b9190810190604081016020820135640100000000811115610a2057600080fd5b820183602082011115610a3257600080fd5b80359060200191846001830284011164010000000083111715610a5457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061233e945050505050565b348015610aa157600080fd5b50610ac260048036036020811015610ab857600080fd5b503560030b612624565b604051808460030b60030b8152602001806020018360030b60030b8152602001828103825284818151815260200191508051906020019080838360008381101561024757818101518382015260200161022f565b348015610b2257600080fd5b506106b06126d9565b348015610b3757600080fd5b506104e360048036036040811015610b4e57600080fd5b50803560030b906020013560070b6126f2565b348015610b6d57600080fd5b50610b76612764565b604080519115158252519081900360200190f35b348015610b9657600080fd5b50610bb760048036036020811015610bad57600080fd5b503560030b61277b565b60405180806020018660070b60070b81526020018560070b60070b81526020018060200180602001848103845289818151815260200191508051906020019080838360005b83811015610c14578181015183820152602001610bfc565b50505050905090810190601f168015610c415780820380516001836020036101000a031916815260200191505b508481038352865181528651602091820191808901910280838360005b83811015610c76578181015183820152602001610c5e565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015610cb5578181015183820152602001610c9d565b505050509050019850505050505050505060405180910390f35b348015610cdb57600080fd5b506104e360048036036020811015610cf257600080fd5b810190602081018135640100000000811115610d0d57600080fd5b820183602082011115610d1f57600080fd5b80359060200191846001830284011164010000000083111715610d4157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506129c5945050505050565b348015610d8e57600080fd5b506104e360048036036040811015610da557600080fd5b50803560030b9060200135600160a060020a0316612aca565b348015610dca57600080fd5b506104e360048036036040811015610de157600080fd5b813560030b9190810190604081016020820135640100000000811115610e0657600080fd5b820183602082011115610e1857600080fd5b80359060200191846001830284011164010000000083111715610e3a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612b1a945050505050565b348015610e8757600080fd5b506104e360048036036040811015610e9e57600080fd5b50803560030b9060200135600160a060020a0316612b8e565b348015610ec357600080fd5b506104e360048036036020811015610eda57600080fd5b810190602081018135640100000000811115610ef557600080fd5b820183602082011115610f0757600080fd5b80359060200191846001830284011164010000000083111715610f2957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612c94945050505050565b348015610f7657600080fd5b506104e360048036036040811015610f8d57600080fd5b813560030b9190810190604081016020820135640100000000811115610fb257600080fd5b820183602082011115610fc457600080fd5b80359060200191846001830284011164010000000083111715610fe657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612ee7945050505050565b34801561103357600080fd5b506104e36004803603602081101561104a57600080fd5b503560030b6130b6565b34801561106057600080fd5b506104e36004803603604081101561107757600080fd5b50803560030b906020013560070b613299565b34801561109657600080fd5b506104e3600480360360408110156110ad57600080fd5b50803560030b906020013560070b61331e565b3480156110cc57600080fd5b506104e3600480360360408110156110e357600080fd5b50600160a060020a03813516906020013560030b6133a9565b34801561110857600080fd5b506104e36004803603604081101561111f57600080fd5b508035600390810b9160200135900b6134e0565b34801561113f57600080fd5b506111486135d1565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561118457818101518382015260200161116c565b505050509050019250505060405180910390f35b3480156111a457600080fd5b506104e3600480360360408110156111bb57600080fd5b50803560030b9060200135600160a060020a031661365b565b3480156111e057600080fd5b50611148600480360360208110156111f757600080fd5b503560030b613826565b34801561120d57600080fd5b506104e36004803603602081101561122457600080fd5b503560030b6138e9565b600381810b900b600090815260016020908152604080832033845260050190915281205460609190819060ff16151561126657600080fd5b61126e613a38565b600385810b810b600090815260016020818152604092839020835160c0810185528154860b860b90950b855280830180548551600261010096831615969096026000190190911694909404601f8101849004840285018401909552848452909385830193928301828280156113245780601f106112f957610100808354040283529160200191611324565b820191906000526020600020905b81548152906001019060200180831161130757829003601f168201915b505050505081526020016002820160009054906101000a900460070b60070b60070b81526020016002820160089054906101000a900460070b60070b60070b8152602001600382018054806020026020016040519081016040528092919081815260200182805480156113c057602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116113a2575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561143e57602002820191906000526020600020906000905b82829054906101000a900460030b60030b815260200190600401906020826003010492830192600103820291508084116114075790505b50505091909252505050602081015160408201516060909201519097919650945092505050565b6003602081815260009283526040928390208054600180830180548751600261010094831615949094026000190190911692909204601f81018690048602830186019097528682529190940b949193929091908301828280156115095780601f106114de57610100808354040283529160200191611509565b820191906000526020600020905b8154815290600101906020018083116114ec57829003601f168201915b50505060028085018054604080516020601f600019610100600187161502019094169590950492830185900485028101850190915281815295969594509092509083018282801561159b5780601f106115705761010080835404028352916020019161159b565b820191906000526020600020905b81548152906001019060200180831161157e57829003601f168201915b5050506003938401549293600784810b9468010000000000000000810490910b93507001000000000000000000000000000000008104820b925060a060020a9004900b87565b600381810b810b600090815260026020818152604080842090920154840b80850b90940b8352600181528183203384526005019052902054606091829160ff16151561162c57600080fd5b611634613a6c565b600385810b810b60009081526002602081815260409283902083516080810185528154860b860b90950b85526001808201805486516101009382161593909302600019011694909404601f810184900484028201840190955284815290938583019391928301828280156116e95780601f106116be576101008083540402835291602001916116e9565b820191906000526020600020905b8154815290600101906020018083116116cc57829003601f168201915b50505091835250506002820154600390810b810b810b6020808401919091529083018054604080518285028101850182528281529401939283018282801561177657602002820191906000526020600020906000905b82829054906101000a900460030b60030b8152602001906004019060208260030104928301926001038202915080841161173f5790505b50505091909252505050602081015160609091015190945092505050915091565b6117a18133612b8e565b6117ab3382611bd9565b6117b533826133a9565b604080516001815290517ff8fc2d154446e315941a028488baf3204c5ef227c4ac71004de6446b7630d0929181900360200190a150565b600381810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b835260018252808320338452600501909152812054606092839291829182918291869160ff16151561184557600080fd5b61184d613a92565b60038a810b810b60009081526020828152604091829020825161010080820185528254860b860b90950b8152600180830180548651600293821615909802600019011691909104601f810185900485028701850190955284865290949193858401938301828280156119005780601f106118d557610100808354040283529160200191611900565b820191906000526020600020905b8154815290600101906020018083116118e357829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156119925780601f1061196757610100808354040283529160200191611992565b820191906000526020600020905b81548152906001019060200180831161197557829003601f168201915b5050509183525050600382810154600781810b810b810b602080860191909152680100000000000000008304820b820b90910b6040808601919091527001000000000000000000000000000000008304840b840b840b606086015260a060020a909204830b830b90920b608084015260048401805482518185028101850190935280835260a0909401939192909190830182828015611a5a57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611a3c575b50505091909252505050602081015160408201516060830151608084015160a085015160c086015160e090960151949e50929c50909a509850965090945092505050919395979092949650565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff161515611af257600080fd5b50600391820b820b6000908152602083905260409020909101805460079290920b67ffffffffffffffff1668010000000000000000026fffffffffffffffff000000000000000019909216919091179055565b600054640100000000900460030b81565b60005460030b81565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff161515611baa57600080fd5b600383810b810b60009081526020918252604090208351611bd392600190920191850190613ad5565b50505050565b600160a060020a03821660009081526004602052604081209080805b6002840154811015611c56578460030b8460020182815481101515611c1657fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b1415611c4e5780915060019250611c56565b600101611bf5565b508115611d4e57600181015b6002840154811015611cf85760028401805482908110611c7e57fe5b90600052602060002090600891828204019190066004029054906101000a900460030b8460020160018303815481101515611cb557fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360030b63ffffffff1602179055508080600101915050611c62565b506002830180546000198101908110611d0d57fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff021916905582600201805480919060019003611d4c9190613b53565b505b5050505050565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff161515611da057600080fd5b600383810b810b600090815260209182526040808220600160a060020a0386168352600490935290205460ff168015611df45750600160a060020a038316600090815260058201602052604090205460ff16155b15611f3357600160a060020a038316600081815260058301602090815260408220805460ff19166001908117909155600485018054918201815583529120018054600160a060020a0319169091179055611e4e828461203c565b7f420b21d138b5666e8964e731ce196d5633578d864852da0bc47b2d4616e00a1b6004600085600160a060020a0316600160a060020a031681526020019081526020016000206001016040518080602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611f205780601f10611ef557610100808354040283529160200191611f20565b820191906000526020600020905b815481529060010190602001808311611f0357829003601f168201915b50509250505060405180910390a1611bd3565b60408051602080825260009082015290517f420b21d138b5666e8964e731ce196d5633578d864852da0bc47b2d4616e00a1b9181900360600190a150505050565b600160208181526000928352604092839020805481840180548651600261010097831615979097026000190190911695909504601f810185900485028601850190965285855260039190910b949193929091908301828280156120185780601f10611fed57610100808354040283529160200191612018565b820191906000526020600020905b815481529060010190602001808311611ffb57829003601f168201915b50505060029093015491925050600781810b91680100000000000000009004900b84565b600382810b900b600090815260016020908152604080832033845260050190915290205460ff16151561206e57600080fd5b600160a060020a03811660009081526004602052604090205460ff1680156120c35750600382810b900b6000908152600160209081526040808320600160a060020a038516845260050190915290205460ff16155b1561221f57600382810b80820b600090815260016020818152604080842095860180548085018255908552828520018054600160a060020a038916600160a060020a0319909116811790915580855260059096018252808420805460ff19168417905560048083528185206002808201805480880182559088528588206008820401805463ffffffff9a8b16600790931690950261010090810a9283029a909202199094169890981790925596909452805182815295830180549384161590950260001901909216929092049184018290527fd6d8568f98742611058036b67bd50f6f100a78c721c7c24bdc98c41f0bc72156939182918201908490801561220c5780601f106121e15761010080835404028352916020019161220c565b820191906000526020600020905b8154815290600101906020018083116121ef57829003601f168201915b50509250505060405180910390a161225b565b60408051602080825260009082015290517fd6d8568f98742611058036b67bd50f6f100a78c721c7c24bdc98c41f0bc721569181900360600190a15b5050565b60606004600083600160a060020a0316600160a060020a031681526020019081526020016000206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561231d5780601f106122f25761010080835404028352916020019161231d565b820191906000526020600020905b81548152906001019060200180831161230057829003601f168201915b50505050509050919050565b60005468010000000000000000900460030b81565b600382810b810b600090815260026020818152604080842090920154840b80850b90940b835260018152818320338452600501905290205460ff16151561238457600080fd5b61238c613a92565b50604080516101008082018352600080546c0100000000000000000000000090819004600390810b810b80865260208087018a815288518083018a52868152888a01526000196060890181905260808901528b840b60a089018190528a850b60c08a015289518781528084018b5260e08a0152840b865260028252888620840180546001808201835591885283882060088204018054600790921660040290990a63ffffffff818102199092169582160294909417909755855494909404830b830b830b8552828152969093208551815463ffffffff1916920b909316178255518051939485949293612486939085019290910190613ad5565b50604082015180516124a2916002840191602090910190613ad5565b50606082015160038083018054608086015160a087015160c0880151850b63ffffffff90811660a060020a0277ffffffff0000000000000000000000000000000000000000199290960b167001000000000000000000000000000000000273ffffffff0000000000000000000000000000000019600793840b67ffffffffffffffff90811668010000000000000000026fffffffffffffffff0000000000000000199990950b1667ffffffffffffffff1990951694909417969096169190911791909116939093179290921617905560e0820151805161258c916004840191602090910190613b8c565b5050600054604080516c01000000000000000000000000909204600390810b810b900b8252517f6be49f4d1712d0fb22da3e4c1396a3e80a71bca29e577dbef8001fb4e5f15be792509081900360200190a15050600080546fffffffff00000000000000000000000019811663ffffffff6c0100000000000000000000000092839004600390810b600101900b169091021790555050565b6002602081815260009283526040928390208054600180830180548751601f6000199483161561010002949094019091169690960491820185900485028601850190965280855260039190910b949193928301828280156126c65780601f1061269b576101008083540402835291602001916126c6565b820191906000526020600020905b8154815290600101906020018083116126a957829003601f168201915b5050506002909301549192505060030b83565b6000546c01000000000000000000000000900460030b81565b600382810b900b600090815260016020908152604080832033845260050190915290205460ff16151561272457600080fd5b600391820b90910b6000908152600160205260409020600201805460079290920b67ffffffffffffffff1667ffffffffffffffff19909216919091179055565b3360009081526004602052604090205460ff165b90565b600381810b900b60009081526001602090815260408083203384526005019091528120546060919081908390819060ff1615156127b757600080fd5b6127bf613a38565b600387810b810b600090815260016020818152604092839020835160c0810185528154860b860b90950b855280830180548551600261010096831615969096026000190190911694909404601f8101849004840285018401909552848452909385830193928301828280156128755780601f1061284a57610100808354040283529160200191612875565b820191906000526020600020905b81548152906001019060200180831161285857829003601f168201915b505050505081526020016002820160009054906101000a900460070b60070b60070b81526020016002820160089054906101000a900460070b60070b60070b81526020016003820180548060200260200160405190810160405280929190818152602001828054801561291157602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116128f3575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561298f57602002820191906000526020600020906000905b82829054906101000a900460030b60030b815260200190600401906020826003010492830192600103820291508084116129585790505b5050509190925250505060208101516040820151606083015160a0840151608090940151929b919a509850919650945092505050565b3360009081526004602052604090205460ff161515612a925760408051606081018252600180825260208083018581528451600080825281840187528587019190915233815260048352949094208351815460ff191690151517815593518051939493612a39938501929190910190613ad5565b5060408201518051612a55916002840191602090910190613bed565b5050604080516001815290517f0dffc5dd87b3acdefad39a6649ed27bf4830bcf3374c54d5140fdd15eebd553992509081900360200190a1612ac7565b604080516000815290517f0dffc5dd87b3acdefad39a6649ed27bf4830bcf3374c54d5140fdd15eebd55399181900360200190a15b50565b600382810b900b600090815260016020908152604080832033845260050190915290205460ff161515612afc57600080fd5b612b068282612b8e565b612b108183611bd9565b61225b81836133a9565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff161515612b6557600080fd5b600383810b810b60009081526020918252604090208351611bd392600290920191850190613ad5565b600382810b900b600090815260016020908152604080832033845260050190915290205460ff161515612bc057600080fd5b600382810b900b6000908152600160205260408120905b6004820154811015611bd3576000600260008460040184815481101515612bfa57fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b60030b8152602001908152602001600020905060008090505b6003820154811015612c8a57612c828260030182815481101515612c5957fe5b90600052602060002090600891828204019190066004029054906101000a900460030b8661365b565b600101612c39565b5050600101612bd7565b6040805160c081018252600080546401000000009004600390810b810b808452602080850187815260001986880181905260608701528651858152808301885260808701528651858152808301885260a087015291830b84526001808252959093208451815463ffffffff191663ffffffff9190940b1692909217825551805193949193612d2a93928501929190910190613ad5565b506040820151600282018054606085015167ffffffffffffffff19909116600793840b67ffffffffffffffff908116919091176fffffffffffffffff00000000000000001916680100000000000000009290940b160291909117905560808201518051612da1916003840191602090910190613b8c565b5060a08201518051612dbd916004840191602090910190613bed565b50506000805464010000000090819004600390810b810b810b8352600160208181526040808620840180548085018255908752828720018054600160a060020a031916339081179091558654869004850b850b850b87528187209087526005018252808620805460ff1916841790556004808352818720875460029091018054958601815588528388206008860401805491889004870b870b63ffffffff90811660079097169093026101000a9586029290950219161790925593548151939004820b820b90910b8252517faedc68e9a9eb366b79839e0b46c3f2d1a3b9eec9c785ec3bd3fcb50f2322aa6d93509081900390910190a1506000805467ffffffff0000000019811663ffffffff64010000000092839004600390810b600101900b16909102179055565b600382810b900b600090815260016020908152604080832033845260050190915290205460ff161515612f1957600080fd5b612f21613a6c565b5060408051608081018252600080546801000000000000000090819004600390810b810b808552602080860188815289840b87890181905288518781528084018a526060890152840b865260018083528887206004908101805480840182559089528489206008820401805460079092169092026101000a63ffffffff8181021990921696821602959095179055865495909504840b840b840b865260028252969094208551815463ffffffff1916930b90911691909117815593518051939485949093612ff3938501920190613ad5565b50604082015160028201805463ffffffff191663ffffffff600393840b161790556060830151805161302b9284019160200190613bed565b50506000546040805168010000000000000000909204600390810b810b900b8252517facdbba31b030f49229d93f7468a1df7733eeb8f4b8f707dbafa0b7a53dfe212592509081900360200190a15050600080546bffffffff000000000000000019811663ffffffff6801000000000000000092839004600390810b600101900b1690910217905550565b600381810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff16151561310157600080fd5b600382810b810b6000908152602082815260408083208401547001000000000000000000000000000000009004840b840b90930b8252600290529081209080805b60038401548110156131a3578560030b846003018281548110151561316357fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b141561319b57809150600192506131a3565b600101613142565b508115611d4e57600181015b600384015481101561324557600384018054829081106131cb57fe5b90600052602060002090600891828204019190066004029054906101000a900460030b846003016001830381548110151561320257fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360030b63ffffffff16021790555080806001019150506131af565b50600383018054600019810190811061325a57fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff021916905582600301805480919060019003611d4c9190613b53565b600382810b900b600090815260016020908152604080832033845260050190915290205460ff1615156132cb57600080fd5b600391820b90910b6000908152600160205260409020600201805460079290920b67ffffffffffffffff1668010000000000000000026fffffffffffffffff000000000000000019909216919091179055565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff16151561336957600080fd5b50600391820b820b6000908152602083905260409020909101805460079290920b67ffffffffffffffff1667ffffffffffffffff19909216919091179055565b600381810b900b60009081526001602052604081209080805b60038401548110156134185785600160a060020a031684600301828154811015156133e957fe5b600091825260209091200154600160a060020a031614156134105780915060019250613418565b6001016133c2565b508115611d4e57600181015b600384015481101561349d576003840180548290811061344057fe5b600091825260209091200154600385018054600160a060020a0390921691600019840190811061346c57fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600101613424565b5060038301805460001981019081106134b257fe5b60009182526020909120018054600160a060020a031916905560038301805490611d4c906000198301613c9b565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff16151561352b57600080fd5b613534836130b6565b50600391820b80830b6000908152602084815260408083208601805473ffffffff00000000000000000000000000000000191670010000000000000000000000000000000063ffffffff97890b8881169190910291909117909155860b835260028252822090940180546001810182559082529390206008840401805460079094166004026101000a808402199094169290911692909202179055565b3360009081526004602090815260409182902060020180548351818402810184019094528084526060939283018282801561365157602002820191906000526020600020906000905b82829054906101000a900460030b60030b8152602001906004019060208260030104928301926001038202915080841161361a5790505b5050505050905090565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff1615156136a657600080fd5b600383810b810b600090815260209182526040808220600160a060020a03861683526005810190935290205460ff1615611bd357600160a060020a03831660009081526005820160205260408120805460ff1916905580805b60048401548110156137555785600160a060020a0316846004018281548110151561372657fe5b600091825260209091200154600160a060020a0316141561374d5780915060019250613755565b6001016136ff565b508115611d4c57600181015b60048401548110156137da576004840180548290811061377d57fe5b600091825260209091200154600485018054600160a060020a039092169160001984019081106137a957fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600101613761565b5060048301805460001981019081106137ef57fe5b60009182526020909120018054600160a060020a03191690556004830180549061381d906000198301613c9b565b50505050505050565b600381810b900b600090815260016020908152604080832033845260050190915290205460609060ff16151561385b57600080fd5b600382810b900b6000908152600160209081526040918290206004018054835181840281018401909452808452909183018282801561231d57602002820191906000526020600020906000905b82829054906101000a900460030b60030b815260200190600401906020826003010492830192600103820291508084116138a8575094979650505050505050565b600381810b900b6000908152600160209081526040808320338452600581019092529091205460ff1615613a005760005b600382015481101561395d57613955826003018281548110151561393a57fe5b600091825260209091200154600160a060020a031684611bd9565b60010161391a565b50600382810b900b60009081526001602081905260408220805463ffffffff19168155919061398e90830182613cbf565b6002820180546fffffffffffffffffffffffffffffffff191690556139b7600383016000613d03565b6139c5600483016000613d21565b5050604080516001815290517f2ba7d88b70a50545812b72874f1c186473c9d50d28e9e907f3ed2a7bc5baed459181900360200190a161225b565b604080516000815290517f2ba7d88b70a50545812b72874f1c186473c9d50d28e9e907f3ed2a7bc5baed459181900360200190a15050565b6040805160c0810182526000808252606060208301819052928201819052828201526080810182905260a081019190915290565b604080516080810182526000808252606060208301819052928201528181019190915290565b604080516101008101825260008082526060602083018190529282018390528282018190526080820181905260a0820181905260c082015260e081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613b1657805160ff1916838001178555613b43565b82800160010185558215613b43579182015b82811115613b43578251825591602001919060010190613b28565b50613b4f929150613d42565b5090565b815481835581811115613b87576007016008900481600701600890048360005260206000209182019101613b879190613d42565b505050565b828054828255906000526020600020908101928215613be1579160200282015b82811115613be15782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190613bac565b50613b4f929150613d5c565b82805482825590600052602060002090600701600890048101928215613c8f5791602002820160005b83821115613c5d57835183826101000a81548163ffffffff021916908360030b63ffffffff1602179055509260200192600401602081600301049283019260010302613c16565b8015613c8d5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302613c5d565b505b50613b4f929150613d80565b815481835581811115613b8757600083815260209020613b87918101908301613d42565b50805460018160011615610100020316600290046000825580601f10613ce55750612ac7565b601f016020900490600052602060002090810190612ac79190613d42565b5080546000825590600052602060002090810190612ac79190613d42565b508054600082556007016008900490600052602060002090810190612ac791905b61277891905b80821115613b4f5760008155600101613d48565b61277891905b80821115613b4f578054600160a060020a0319168155600101613d62565b61277891905b80821115613b4f57805463ffffffff19168155600101613d8656fea165627a7a7230582005eb0e8ff48b782bb6c3a0e42e62c9eba3f926a7df20f9c146f6474f678725f20029";

    public static final String FUNC_TASKS = "tasks";

    public static final String FUNC_BOARDSCREATED = "boardsCreated";

    public static final String FUNC_BOARDSCOUNT = "boardsCount";

    public static final String FUNC_BOARDS = "boards";

    public static final String FUNC_GROUPSCREATED = "groupsCreated";

    public static final String FUNC_GROUPS = "groups";

    public static final String FUNC_TASKSCREATED = "tasksCreated";

    public static final String FUNC_ADDBOARD = "addBoard";

    public static final String FUNC_GETUSERNICK = "getUserNick";

    public static final String FUNC_ADDGROUP = "addGroup";

    public static final String FUNC_ADDTASK = "addTask";

    public static final String FUNC_SETTASKDESCRIPTION = "setTaskDescription";

    public static final String FUNC_SETTASKTITLE = "setTaskTitle";

    public static final String FUNC_SETTASKGROUP = "setTaskGroup";

    public static final String FUNC_REMOVETASKFROMGROUP = "removeTaskFromGroup";

    public static final String FUNC_SETTASKSTART = "setTaskStart";

    public static final String FUNC_SETTASKFINISH = "setTaskFinish";

    public static final String FUNC_SETBOARDSTART = "setBoardStart";

    public static final String FUNC_SETBOARDFINISH = "setBoardFinish";

    public static final String FUNC_ADDBOARDPARTICIPANT = "addBoardParticipant";

    public static final String FUNC_REMOVEBOARDPARTICIPANT = "removeBoardParticipant";

    public static final String FUNC_SIGNIN = "signIn";

    public static final String FUNC_SIGNUP = "signUp";

    public static final String FUNC_GETBOARD = "getBoard";

    public static final String FUNC_GETBOARDCARD = "getBoardCard";

    public static final String FUNC_GETBOARDSINDICES = "getBoardsIndices";

    public static final String FUNC_GETGROUPSINDICES = "getGroupsIndices";

    public static final String FUNC_GETGROUP = "getGroup";

    public static final String FUNC_GETTASK = "getTask";

    public static final String FUNC_REMOVEBOARDFROMUSER = "removeBoardFromUser";

    public static final String FUNC_REMOVEUSERFROMBOARD = "removeUserFromBoard";

    public static final String FUNC_ADDTASKPARTICIPANT = "addTaskParticipant";

    public static final String FUNC_REMOVETASKUSER = "removeTaskUser";

    public static final String FUNC_REMOVETASKUSERSOFBOARD = "removeTaskUsersOfBoard";

    public static final String FUNC_LEAVEBOARD = "leaveBoard";

    public static final String FUNC_ERASEBOARD = "eraseBoard";

    public static final Event BOARDADDED_EVENT = new Event("boardAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event SIGNEDUP_EVENT = new Event("signedUp",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event BOARDLEFT_EVENT = new Event("boardLeft",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event BOARDREMOVED_EVENT = new Event("boardRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event GROUPADDED_EVENT = new Event("groupAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event BOARDPARTICIPANTADDED_EVENT = new Event("boardParticipantAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event TASKPARTICIPANTADDED_EVENT = new Event("taskParticipantAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event TASKADDED_EVENT = new Event("taskAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event TXCOMMITED_EVENT = new Event("txCommited",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected ProManSmartContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProManSmartContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProManSmartContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProManSmartContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger>> tasks(BigInteger param0) {
        final Function function = new Function(FUNC_TASKS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}, new TypeReference<Int32>() {}, new TypeReference<Int32>() {}));
        return new RemoteCall<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> boardsCreated() {
        final Function function = new Function(FUNC_BOARDSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> boardsCount() {
        final Function function = new Function(FUNC_BOARDSCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple4<BigInteger, String, BigInteger, BigInteger>> boards(BigInteger param0) {
        final Function function = new Function(FUNC_BOARDS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, BigInteger, BigInteger>>(
                new Callable<Tuple4<BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> groupsCreated() {
        final Function function = new Function(FUNC_GROUPSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<BigInteger, String, BigInteger>> groups(BigInteger param0) {
        final Function function = new Function(FUNC_GROUPS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int32>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, BigInteger>>(
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> tasksCreated() {
        final Function function = new Function(FUNC_TASKSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<BoardAddedEventResponse> getBoardAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDADDED_EVENT, transactionReceipt);
        ArrayList<BoardAddedEventResponse> responses = new ArrayList<BoardAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardAddedEventResponse typedResponse = new BoardAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardAddedEventResponse> boardAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardAddedEventResponse>() {
            @Override
            public BoardAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDADDED_EVENT, log);
                BoardAddedEventResponse typedResponse = new BoardAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardAddedEventResponse> boardAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDADDED_EVENT));
        return boardAddedEventFlowable(filter);
    }

    public List<SignedUpEventResponse> getSignedUpEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNEDUP_EVENT, transactionReceipt);
        ArrayList<SignedUpEventResponse> responses = new ArrayList<SignedUpEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignedUpEventResponse typedResponse = new SignedUpEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignedUpEventResponse> signedUpEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SignedUpEventResponse>() {
            @Override
            public SignedUpEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNEDUP_EVENT, log);
                SignedUpEventResponse typedResponse = new SignedUpEventResponse();
                typedResponse.log = log;
                typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SignedUpEventResponse> signedUpEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNEDUP_EVENT));
        return signedUpEventFlowable(filter);
    }

    public List<BoardLeftEventResponse> getBoardLeftEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDLEFT_EVENT, transactionReceipt);
        ArrayList<BoardLeftEventResponse> responses = new ArrayList<BoardLeftEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardLeftEventResponse typedResponse = new BoardLeftEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.left = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardLeftEventResponse> boardLeftEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardLeftEventResponse>() {
            @Override
            public BoardLeftEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDLEFT_EVENT, log);
                BoardLeftEventResponse typedResponse = new BoardLeftEventResponse();
                typedResponse.log = log;
                typedResponse.left = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardLeftEventResponse> boardLeftEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDLEFT_EVENT));
        return boardLeftEventFlowable(filter);
    }

    public List<BoardRemovedEventResponse> getBoardRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDREMOVED_EVENT, transactionReceipt);
        ArrayList<BoardRemovedEventResponse> responses = new ArrayList<BoardRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardRemovedEventResponse typedResponse = new BoardRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.removed = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardRemovedEventResponse> boardRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardRemovedEventResponse>() {
            @Override
            public BoardRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDREMOVED_EVENT, log);
                BoardRemovedEventResponse typedResponse = new BoardRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.removed = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardRemovedEventResponse> boardRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDREMOVED_EVENT));
        return boardRemovedEventFlowable(filter);
    }

    public List<GroupAddedEventResponse> getGroupAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GROUPADDED_EVENT, transactionReceipt);
        ArrayList<GroupAddedEventResponse> responses = new ArrayList<GroupAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GroupAddedEventResponse typedResponse = new GroupAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GroupAddedEventResponse> groupAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, GroupAddedEventResponse>() {
            @Override
            public GroupAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(GROUPADDED_EVENT, log);
                GroupAddedEventResponse typedResponse = new GroupAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<GroupAddedEventResponse> groupAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GROUPADDED_EVENT));
        return groupAddedEventFlowable(filter);
    }

    public List<BoardParticipantAddedEventResponse> getBoardParticipantAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDPARTICIPANTADDED_EVENT, transactionReceipt);
        ArrayList<BoardParticipantAddedEventResponse> responses = new ArrayList<BoardParticipantAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardParticipantAddedEventResponse typedResponse = new BoardParticipantAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nick = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardParticipantAddedEventResponse> boardParticipantAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardParticipantAddedEventResponse>() {
            @Override
            public BoardParticipantAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDPARTICIPANTADDED_EVENT, log);
                BoardParticipantAddedEventResponse typedResponse = new BoardParticipantAddedEventResponse();
                typedResponse.log = log;
                typedResponse.nick = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardParticipantAddedEventResponse> boardParticipantAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDPARTICIPANTADDED_EVENT));
        return boardParticipantAddedEventFlowable(filter);
    }

    public List<TaskParticipantAddedEventResponse> getTaskParticipantAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TASKPARTICIPANTADDED_EVENT, transactionReceipt);
        ArrayList<TaskParticipantAddedEventResponse> responses = new ArrayList<TaskParticipantAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TaskParticipantAddedEventResponse typedResponse = new TaskParticipantAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nick = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TaskParticipantAddedEventResponse> taskParticipantAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TaskParticipantAddedEventResponse>() {
            @Override
            public TaskParticipantAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TASKPARTICIPANTADDED_EVENT, log);
                TaskParticipantAddedEventResponse typedResponse = new TaskParticipantAddedEventResponse();
                typedResponse.log = log;
                typedResponse.nick = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TaskParticipantAddedEventResponse> taskParticipantAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TASKPARTICIPANTADDED_EVENT));
        return taskParticipantAddedEventFlowable(filter);
    }

    public List<TaskAddedEventResponse> getTaskAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TASKADDED_EVENT, transactionReceipt);
        ArrayList<TaskAddedEventResponse> responses = new ArrayList<TaskAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TaskAddedEventResponse typedResponse = new TaskAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TaskAddedEventResponse> taskAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TaskAddedEventResponse>() {
            @Override
            public TaskAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TASKADDED_EVENT, log);
                TaskAddedEventResponse typedResponse = new TaskAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TaskAddedEventResponse> taskAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TASKADDED_EVENT));
        return taskAddedEventFlowable(filter);
    }

    public List<TxCommitedEventResponse> getTxCommitedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TXCOMMITED_EVENT, transactionReceipt);
        ArrayList<TxCommitedEventResponse> responses = new ArrayList<TxCommitedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TxCommitedEventResponse typedResponse = new TxCommitedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commited = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TxCommitedEventResponse> txCommitedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TxCommitedEventResponse>() {
            @Override
            public TxCommitedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TXCOMMITED_EVENT, log);
                TxCommitedEventResponse typedResponse = new TxCommitedEventResponse();
                typedResponse.log = log;
                typedResponse.commited = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TxCommitedEventResponse> txCommitedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TXCOMMITED_EVENT));
        return txCommitedEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> addBoard(String title) {
        final Function function = new Function(
                FUNC_ADDBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getUserNick(String user) {
        final Function function = new Function(FUNC_GETUSERNICK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addGroup(BigInteger boardId, String title) {
        final Function function = new Function(
                FUNC_ADDGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTask(BigInteger groupId, String title) {
        final Function function = new Function(
                FUNC_ADDTASK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(groupId),
                        new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTaskDescription(BigInteger taskId, String description) {
        final Function function = new Function(
                FUNC_SETTASKDESCRIPTION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.Utf8String(description)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTaskTitle(BigInteger taskId, String title) {
        final Function function = new Function(
                FUNC_SETTASKTITLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTaskGroup(BigInteger taskId, BigInteger groupId) {
        final Function function = new Function(
                FUNC_SETTASKGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.generated.Int32(groupId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeTaskFromGroup(BigInteger taskId) {
        final Function function = new Function(
                FUNC_REMOVETASKFROMGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTaskStart(BigInteger taskId, BigInteger time) {
        final Function function = new Function(
                FUNC_SETTASKSTART,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.generated.Int64(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTaskFinish(BigInteger taskId, BigInteger time) {
        final Function function = new Function(
                FUNC_SETTASKFINISH,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.generated.Int64(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBoardStart(BigInteger boardId, BigInteger time) {
        final Function function = new Function(
                FUNC_SETBOARDSTART,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.generated.Int64(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBoardFinish(BigInteger boardId, BigInteger time) {
        final Function function = new Function(
                FUNC_SETBOARDFINISH,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.generated.Int64(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addBoardParticipant(BigInteger boardId, String user) {
        final Function function = new Function(
                FUNC_ADDBOARDPARTICIPANT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.Address(user)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeBoardParticipant(BigInteger boardId, String user) {
        final Function function = new Function(
                FUNC_REMOVEBOARDPARTICIPANT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.Address(user)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> signIn() {
        final Function function = new Function(FUNC_SIGNIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> signUp(String nick) {
        final Function function = new Function(
                FUNC_SIGNUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nick)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<String, BigInteger, BigInteger, List<BigInteger>, List<String>>> getBoard(BigInteger id) {
        final Function function = new Function(FUNC_GETBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}, new TypeReference<DynamicArray<Int32>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, BigInteger, List<BigInteger>, List<String>>>(
                new Callable<Tuple5<String, BigInteger, BigInteger, List<BigInteger>, List<String>>>() {
                    @Override
                    public Tuple5<String, BigInteger, BigInteger, List<BigInteger>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, BigInteger, List<BigInteger>, List<String>>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                convertToNative((List<Int32>) results.get(3).getValue()),
                                convertToNative((List<Address>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple3<String, BigInteger, BigInteger>> getBoardCard(BigInteger id) {
        final Function function = new Function(FUNC_GETBOARDCARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple3<String, BigInteger, BigInteger>>(
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<List> getBoardsIndices() {
        final Function function = new Function(FUNC_GETBOARDSINDICES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getGroupsIndices(BigInteger boardId) {
        final Function function = new Function(FUNC_GETGROUPSINDICES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple2<String, List<BigInteger>>> getGroup(BigInteger groupId) {
        final Function function = new Function(FUNC_GETGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(groupId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<Tuple2<String, List<BigInteger>>>(
                new Callable<Tuple2<String, List<BigInteger>>>() {
                    @Override
                    public Tuple2<String, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, List<BigInteger>>(
                                (String) results.get(0).getValue(),
                                convertToNative((List<Int32>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, List<String>>> getTask(BigInteger taskId) {
        final Function function = new Function(FUNC_GETTASK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}, new TypeReference<Int32>() {}, new TypeReference<Int32>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, List<String>>>(
                new Callable<Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, List<String>>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, List<String>>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                convertToNative((List<Address>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> removeBoardFromUser(String userId, BigInteger boardId) {
        final Function function = new Function(
                FUNC_REMOVEBOARDFROMUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId),
                        new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeUserFromBoard(String userId, BigInteger boardId) {
        final Function function = new Function(
                FUNC_REMOVEUSERFROMBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId),
                        new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTaskParticipant(BigInteger taskId, String user) {
        final Function function = new Function(
                FUNC_ADDTASKPARTICIPANT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.Address(user)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeTaskUser(BigInteger taskId, String userId) {
        final Function function = new Function(
                FUNC_REMOVETASKUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.Address(userId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeTaskUsersOfBoard(BigInteger boardId, String userId) {
        final Function function = new Function(
                FUNC_REMOVETASKUSERSOFBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.Address(userId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> leaveBoard(BigInteger id) {
        final Function function = new Function(
                FUNC_LEAVEBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> eraseBoard(BigInteger id) {
        final Function function = new Function(
                FUNC_ERASEBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static ProManSmartContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProManSmartContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProManSmartContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProManSmartContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ProManSmartContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ProManSmartContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ProManSmartContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProManSmartContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ProManSmartContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProManSmartContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProManSmartContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProManSmartContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ProManSmartContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProManSmartContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProManSmartContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProManSmartContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class BoardAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class SignedUpEventResponse {
        public Log log;

        public Boolean success;
    }

    public static class BoardLeftEventResponse {
        public Log log;

        public Boolean left;
    }

    public static class BoardRemovedEventResponse {
        public Log log;

        public Boolean removed;
    }

    public static class GroupAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class BoardParticipantAddedEventResponse {
        public Log log;

        public String nick;
    }

    public static class TaskParticipantAddedEventResponse {
        public Log log;

        public String nick;
    }

    public static class TaskAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class TxCommitedEventResponse {
        public Log log;

        public Boolean commited;
    }
}
