package com.onudapps.proman.contracts;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Int32;
import org.web3j.abi.datatypes.generated.Int64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class Smart extends Contract {
    private static final String BINARY = "0x6080604052600080546001608060020a031916905534801561002057600080fd5b50612733806100306000396000f3fe6080604052600436106101065763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630d60436d811461010b5780631274290214610139578063381468e81461016a578063385e17db1461019c57806339d2ff17146101be57806354272d94146101ee5780635bc4ec8b146102105780636320b3f8146102255780636a5baba1146102455780637dc03f741461027557806380caf07d1461028a57806384dc3886146102aa578063884eaab5146102d8578063ac85f7f7146102ed578063cb9d8c5c1461031d578063ce8823a51461033d578063de0040be1461035d578063f8f3378e1461037d578063fc0a5e91146103aa575b600080fd5b34801561011757600080fd5b506101206103ca565b604051610130949392919061241f565b60405180910390f35b34801561014557600080fd5b5061015961015436600461220a565b6107e3565b6040516101309594939291906124fd565b34801561017657600080fd5b5061018a61018536600461220a565b61093d565b6040516101309695949392919061254d565b3480156101a857600080fd5b506101bc6101b736600461220a565b610e4a565b005b3480156101ca57600080fd5b506101de6101d936600461220a565b610e99565b604051610130949392919061260d565b3480156101fa57600080fd5b5061020361104d565b604051610130919061248a565b34801561021c57600080fd5b5061020361105e565b34801561023157600080fd5b506101bc6102403660046121d0565b611067565b34801561025157600080fd5b5061026561026036600461220a565b6111e3565b60405161013094939291906124b8565b34801561028157600080fd5b506102036112ab565b34801561029657600080fd5b506101bc6102a5366004612230565b6112c0565b3480156102b657600080fd5b506102ca6102c536600461220a565b6113e6565b604051610130929190612498565b3480156102e457600080fd5b50610203611492565b3480156102f957600080fd5b5061030d61030836600461220a565b6114ab565b60405161013094939291906125ce565b34801561032957600080fd5b506101bc610338366004612278565b6116b9565b34801561034957600080fd5b506101bc610358366004612230565b61199f565b34801561036957600080fd5b506101bc6103783660046121d0565b611aae565b34801561038957600080fd5b5061039d61039836600461220a565b611bff565b604051610130919061240e565b3480156103b657600080fd5b506101bc6103c536600461220a565b611c91565b60608060608060606004600033600160a060020a0316600160a060020a0316815260200190815260200160002060010180549050604051908082528060200260200182016040528015610427578160200160208202803883390190505b5033600090815260046020908152604091829020600101548251818152818302810190920190925291925060609190801561047657816020015b60608152602001906001900390816104615790505b503360009081526004602090815260409182902060010154825181815281830281019092019092529192506060919080156104bb578160200160208202803883390190505b50336000908152600460209081526040918290206001015482518181528183028101909201909252919250606091908015610500578160200160208202803883390190505b50905060005b336000908152600460205260409020600101548110156107d457336000908152600460205260408120600190810180549192918490811061054357fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b60030b815260200190815260200160002060000160009054906101000a900460030b858281518110151561059957fe5b600392830b90920b602092830290910182015233600090815260049091526040812060019081018054919291849081106105cf57fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b60030b81526020019081526020016000206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561069d5780601f106106725761010080835404028352916020019161069d565b820191906000526020600020905b81548152906001019060200180831161068057829003601f168201915b505050505084828151811015156106b057fe5b602090810290910181019190915233600090815260049091526040812060019081018054919291849081106106e157fe5b6000918252602080832060088304015460046007938416026101000a9004600390810b810b900b845283019390935260409091019020600201548451910b9084908390811061072c57fe5b600792830b90920b6020928302909101820152336000908152600490915260408120600190810180549192918490811061076257fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b60030b815260200190815260200160002060020160089054906101000a900460070b82828151811015156107b857fe5b600792830b90920b602092830290910190910152600101610506565b50929791965094509092509050565b6003602081815260009283526040928390208054600180830180548751600261010094831615949094026000190190911692909204601f81018690048602830186019097528682529190940b949193929091908301828280156108875780601f1061085c57610100808354040283529160200191610887565b820191906000526020600020905b81548152906001019060200180831161086a57829003601f168201915b50505060028085018054604080516020601f60001961010060018716150201909416959095049283018590048502810185019091528181529596959450909250908301828280156109195780601f106108ee57610100808354040283529160200191610919565b820191906000526020600020905b8154815290600101906020018083116108fc57829003601f168201915b50505060039093015491925050600781810b91680100000000000000009004900b85565b60608060608060608061094e611de9565b600388810b810b60009081526002602081815260409283902083516060810185528154860b860b90950b85526001808201805486516101009382161593909302600019011694909404601f81018490048402820184019095528481529093858301939192830182828015610a035780601f106109d857610100808354040283529160200191610a03565b820191906000526020600020905b8154815290600101906020018083116109e657829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610a8157602002820191906000526020600020906000905b82829054906101000a900460030b60030b81526020019060040190602082600301049283019260010382029150808411610a4a5790505b50505050508152505090506060816040015151604051908082528060200260200182016040528015610ac757816020015b6060815260200190600190039081610ab25790505b5090506060826040015151604051908082528060200260200182016040528015610b0557816020015b6060815260200190600190039081610af05790505b5090506060836040015151604051908082528060200260200182016040528015610b39578160200160208202803883390190505b5090506060846040015151604051908082528060200260200182016040528015610b6d578160200160208202803883390190505b50905060005b856040015151811015610e2a5760036000876040015183815181101515610b9657fe5b9060200190602002015160030b60030b81526020019081526020016000206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c4b5780601f10610c2057610100808354040283529160200191610c4b565b820191906000526020600020905b815481529060010190602001808311610c2e57829003601f168201915b50505050508582815181101515610c5e57fe5b602090810290910101526040860151805160039160009184908110610c7f57fe5b9060200190602002015160030b60030b81526020019081526020016000206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d345780601f10610d0957610100808354040283529160200191610d34565b820191906000526020600020905b815481529060010190602001808311610d1757829003601f168201915b50505050508482815181101515610d4757fe5b602090810290910101526040860151805160039160009184908110610d6857fe5b9060200190602002015160030b60030b815260200190815260200160002060030160009054906101000a900460070b8382815181101515610da557fe5b9060200190602002019060070b908160070b8152505060036000876040015183815181101515610dd157fe5b9060200190602002015160030b60030b815260200190815260200160002060030160089054906101000a900460070b8282815181101515610e0e57fe5b600792830b90920b602092830290910190910152600101610b73565b506020850151604090950151949c949b5092995090975095509350915050565b610e543382611067565b610e5e3382611aae565b7ff8fc2d154446e315941a028488baf3204c5ef227c4ac71004de6446b7630d0926001604051610e8e9190612476565b60405180910390a150565b606080600080610ea7611e0e565b600386810b810b60009081526020828152604091829020825160a0810184528154850b850b90940b8452600180820180548551600261010094831615949094026000190190911692909204601f8101859004850283018501909552848252919385840193919291830182828015610f5f5780601f10610f3457610100808354040283529160200191610f5f565b820191906000526020600020905b815481529060010190602001808311610f4257829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f81018390048302850183019091528084529381019390830182828015610ff15780601f10610fc657610100808354040283529160200191610ff1565b820191906000526020600020905b815481529060010190602001808311610fd457829003601f168201915b505050918352505060039190910154600781810b810b810b60208085019190915268010000000000000000909204810b810b900b6040928301528201519082015160608301516080909301519199909850919650945092505050565b600054640100000000900460030b81565b60005460030b81565b600160a060020a03821660009081526004602052604081209080805b60018401548110156110e4578460030b84600101828154811015156110a457fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b14156110dc57809150600192506110e4565b600101611083565b5081156111dc57600181015b6001840154811015611186576001840180548290811061110c57fe5b90600052602060002090600891828204019190066004029054906101000a900460030b846001016001830381548110151561114357fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360030b63ffffffff16021790555080806001019150506110f0565b50600183018054600019810190811061119b57fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff0219169055826001018054809190600190036111da9190611e3d565b505b5050505050565b600160208181526000928352604092839020805481840180548651600261010097831615979097026000190190911695909504601f810185900485028601850190965285855260039190910b949193929091908301828280156112875780601f1061125c57610100808354040283529160200191611287565b820191906000526020600020905b81548152906001019060200180831161126a57829003601f168201915b50505060029093015491925050600781810b91680100000000000000009004900b84565b60005468010000000000000000900460030b81565b6112c8611e0e565b506040805160a081018252600080546c0100000000000000000000000090819004600390810b810b8085526020808601889052865180820188528581528688015260001960608701819052608087015288830b830b855260028082528786200180546001810182559086529085206008820401805460079092166004026101000a63ffffffff8181021990931692909316929092021790559154935192937f6be49f4d1712d0fb22da3e4c1396a3e80a71bca29e577dbef8001fb4e5f15be793611399939290910490910b9061248a565b60405180910390a15050600080546fffffffff00000000000000000000000019811663ffffffff6c0100000000000000000000000092839004600390810b600101900b1690910217905550565b6002602081815260009283526040928390208054600180830180548751601f6000199483161561010002949094019091169690960491820185900485028601850190965280855260039190910b949193928301828280156114885780601f1061145d57610100808354040283529160200191611488565b820191906000526020600020905b81548152906001019060200180831161146b57829003601f168201915b5050505050905082565b6000546c01000000000000000000000000900460030b81565b606060008060606114ba611e76565b600386810b810b600090815260016020818152604092839020835160c0810185528154860b860b90950b855280830180548551600261010096831615969096026000190190911694909404601f8101849004840285018401909552848452909385830193928301828280156115705780601f1061154557610100808354040283529160200191611570565b820191906000526020600020905b81548152906001019060200180831161155357829003601f168201915b505050505081526020016002820160009054906101000a900460070b60070b60070b81526020016002820160089054906101000a900460070b60070b60070b81526020016003820180548060200260200160405190810160405280929190818152602001828054801561160c57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116115ee575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561168a57602002820191906000526020600020906000905b82829054906101000a900460030b60030b815260200190600401906020826003010492830192600103820291508084116116535790505b5050509190925250505060208101516040820151606083015160a0909301519199909850919650945092505050565b6040805160c081018252600080546401000000009004600390810b810b808452602080850187815260001986880181905260608701528651858152808301885260808701528651858152808301885260a087015291830b84526001808252959093208451815463ffffffff191663ffffffff9190940b169290921782555180519394919361174f93928501929190910190611eaa565b506040820151600282018054606085015167ffffffffffffffff19909116600793840b67ffffffffffffffff908116919091176fffffffffffffffff00000000000000001916680100000000000000009290940b1602919091179055608082015180516117c6916003840191602090910190611f28565b5060a082015180516117e2916004840191602090910190611f96565b50506000805464010000000090819004600390810b810b810b835260016020818152604080862084018054808501825590875282872001805473ffffffffffffffffffffffffffffffffffffffff191633908117909155865495909504840b840b90930b855282852093855260059093018352818420805460ff19169091179055600490915290205460ff16151590506118cd5760408051808201825260018082528251600080825260208083018652808501928352338252600481529490208351815460ff191690151517815590518051939491936118c9938501929190910190611f96565b5050505b336000908152600460208181526040808420845460019182018054928301815586529285206008820401805464010000000094859004600390810b810b63ffffffff90811660079095169097026101000a93840296909302191694909417909355925492517faedc68e9a9eb366b79839e0b46c3f2d1a3b9eec9c785ec3bd3fcb50f2322aa6d936119649392900490910b9061248a565b60405180910390a1506000805467ffffffff0000000019811663ffffffff64010000000092839004600390810b600101900b16909102179055565b6119a7611de9565b5060408051606081018252600080546801000000000000000090819004600390810b810b8085526020808601889052865185815280820188528688015288830b830b8552600180825287862060049081018054928301815587529186206008820401805463ffffffff94851660079093169093026101000a91820293909102199091169190911790559154935192937facdbba31b030f49229d93f7468a1df7733eeb8f4b8f707dbafa0b7a53dfe212593611a69939290910490910b9061248a565b60405180910390a15050600080546bffffffff000000000000000019811663ffffffff6801000000000000000092839004600390810b600101900b1690910217905550565b600381810b900b60009081526001602052604081209080805b6003840154811015611b1d5785600160a060020a03168460030182815481101515611aee57fe5b600091825260209091200154600160a060020a03161415611b155780915060019250611b1d565b600101611ac7565b5081156111dc57600181015b6003840154811015611baf5760038401805482908110611b4557fe5b600091825260209091200154600385018054600160a060020a03909216916000198401908110611b7157fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600101611b29565b506003830180546000198101908110611bc457fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff19169055600383018054906111da906000198301612044565b600381810b900b600090815260016020908152604091829020600401805483518184028101840190945280845260609392830182828015611c8557602002820191906000526020600020906000905b82829054906101000a900460030b60030b81526020019060040190602082600301049283019260010382029150808411611c4e5790505b50505050509050919050565b600381810b900b6000908152600160209081526040808320338452600581019092529091205460ff1615611dac5760005b6003820154811015611d0557611cfd8260030182815481101515611ce257fe5b600091825260209091200154600160a060020a031684611067565b600101611cc2565b50600382810b900b60009081526001602081905260408220805463ffffffff191681559190611d3690830182612068565b6002820180546fffffffffffffffffffffffffffffffff19169055611d5f6003830160006120af565b611d6d6004830160006120cd565b50507f2ba7d88b70a50545812b72874f1c186473c9d50d28e9e907f3ed2a7bc5baed456001604051611d9f9190612476565b60405180910390a1611de5565b7f2ba7d88b70a50545812b72874f1c186473c9d50d28e9e907f3ed2a7bc5baed456000604051611ddc9190612476565b60405180910390a15b5050565b606060405190810160405280600060030b815260200160608152602001606081525090565b6040805160a0810182526000808252606060208301819052928201839052918101829052608081019190915290565b815481835581811115611e71576007016008900481600701600890048360005260206000209182019101611e7191906120ee565b505050565b6040805160c0810182526000808252606060208301819052928201819052828201526080810182905260a081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611eeb57805160ff1916838001178555611f18565b82800160010185558215611f18579182015b82811115611f18578251825591602001919060010190611efd565b50611f249291506120ee565b5090565b828054828255906000526020600020908101928215611f8a579160200282015b82811115611f8a578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178255602090920191600190910190611f48565b50611f2492915061210b565b828054828255906000526020600020906007016008900481019282156120385791602002820160005b8382111561200657835183826101000a81548163ffffffff021916908360030b63ffffffff1602179055509260200192600401602081600301049283019260010302611fbf565b80156120365782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612006565b505b50611f2492915061213c565b815481835581811115611e7157600083815260209020611e719181019083016120ee565b50805460018160011615610100020316600290046000825580601f1061208e57506120ac565b601f0160209004906000526020600020908101906120ac91906120ee565b50565b50805460008255906000526020600020908101906120ac91906120ee565b5080546000825560070160089004906000526020600020908101906120ac91905b61210891905b80821115611f2457600081556001016120f4565b90565b61210891905b80821115611f2457805473ffffffffffffffffffffffffffffffffffffffff19168155600101612111565b61210891905b80821115611f2457805463ffffffff19168155600101612142565b600061216982356126a8565b9392505050565b60006121698235612690565b6000601f8201831361218d57600080fd5b81356121a061219b82612659565b612632565b915080825260208301602083018583830111156121bc57600080fd5b6121c78382846126b3565b50505092915050565b600080604083850312156121e357600080fd5b60006121ef858561215d565b925050602061220085828601612170565b9150509250929050565b60006020828403121561221c57600080fd5b60006122288484612170565b949350505050565b6000806040838503121561224357600080fd5b600061224f8585612170565b925050602083013567ffffffffffffffff81111561226c57600080fd5b6122008582860161217c565b60006020828403121561228a57600080fd5b813567ffffffffffffffff8111156122a157600080fd5b6122288482850161217c565b60006122b882612687565b8084526020840193506122ca83612681565b60005b828110156122fa576122e08683516123c7565b6122e982612681565b6020969096019591506001016122cd565b5093949350505050565b600061230f82612687565b80845260208401935061232183612681565b60005b828110156122fa576123378683516123d0565b61234082612681565b602096909601959150600101612324565b600061235c82612687565b8084526020840193508360208202850161237585612681565b60005b848110156123ac5783830388526123908383516123d9565b925061239b82612681565b602098909801979150600101612378565b50909695505050505050565b6123c18161268b565b82525050565b6123c181612690565b6123c181612696565b60006123e482612687565b8084526123f88160208601602086016126bf565b612401816126ef565b9093016020019392505050565b6020808252810161216981846122ad565b6080808252810161243081876122ad565b905081810360208301526124448186612351565b905081810360408301526124588185612304565b9050818103606083015261246c8184612304565b9695505050505050565b6020810161248482846123b8565b92915050565b6020810161248482846123c7565b604081016124a682856123c7565b818103602083015261222881846123d9565b608081016124c682876123c7565b81810360208301526124d881866123d9565b90506124e760408301856123d0565b6124f460608301846123d0565b95945050505050565b60a0810161250b82886123c7565b818103602083015261251d81876123d9565b9050818103604083015261253181866123d9565b905061254060608301856123d0565b61246c60808301846123d0565b60c0808252810161255e81896123d9565b9050818103602083015261257281886122ad565b905081810360408301526125868187612351565b9050818103606083015261259a8186612351565b905081810360808301526125ae8185612304565b905081810360a08301526125c28184612304565b98975050505050505050565b608080825281016125df81876123d9565b90506125ee60208301866123d0565b6125fb60408301856123d0565b818103606083015261246c81846122ad565b6080808252810161261e81876123d9565b905081810360208301526124d881866123d9565b60405181810167ffffffffffffffff8111828210171561265157600080fd5b604052919050565b600067ffffffffffffffff82111561267057600080fd5b506020601f91909101601f19160190565b60200190565b5190565b151590565b60030b90565b60070b90565b600160a060020a031690565b60006124848261269c565b82818337506000910152565b60005b838110156126da5781810151838201526020016126c2565b838111156126e9576000848401525b50505050565b601f01601f19169056fea265627a7a723058202769c761c41e9d5e462ef0a84a58ee24d8fd8ecfb2f50768080564f09dbf4ead6c6578706572696d656e74616cf50037";

    public static final String FUNC_TASKS = "tasks";

    public static final String FUNC_BOARDSCREATED = "boardsCreated";

    public static final String FUNC_BOARDSCOUNT = "boardsCount";

    public static final String FUNC_BOARDS = "boards";

    public static final String FUNC_GROUPSCREATED = "groupsCreated";

    public static final String FUNC_GROUPS = "groups";

    public static final String FUNC_TASKSCREATED = "tasksCreated";

    public static final String FUNC_ADDBOARD = "addBoard";

    public static final String FUNC_ADDGROUP = "addGroup";

    public static final String FUNC_ADDTASK = "addTask";

    public static final String FUNC_GETBOARDCARDS = "getBoardCards";

    public static final String FUNC_GETBOARD = "getBoard";

    public static final String FUNC_GETGROUPSINDICES = "getGroupsIndices";

    public static final String FUNC_GETGROUP = "getGroup";

    public static final String FUNC_GETTASK = "getTask";

    public static final String FUNC_REMOVEBOARDFROMUSER = "removeBoardFromUser";

    public static final String FUNC_REMOVEUSERFROMBOARD = "removeUserFromBoard";

    public static final String FUNC_LEAVEBOARD = "leaveBoard";

    public static final String FUNC_ERASEBOARD = "eraseBoard";

    public static final Event BOARDADDED_EVENT = new Event("boardAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event BOARDLEFT_EVENT = new Event("boardLeft",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event BOARDREMOVED_EVENT = new Event("boardRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event GROUPADDED_EVENT = new Event("groupAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event TASKADDED_EVENT = new Event("taskAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    @Deprecated
    protected Smart(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Smart(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Smart(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Smart(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple5<BigInteger, String, String, BigInteger, BigInteger>> tasks(BigInteger param0) {
        final Function function = new Function(FUNC_TASKS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple5<BigInteger, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple5<BigInteger, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> boardsCreated() {
        final Function function = new Function(FUNC_BOARDSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> boardsCount() {
        final Function function = new Function(FUNC_BOARDSCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple4<BigInteger, String, BigInteger, BigInteger>> boards(BigInteger param0) {
        final Function function = new Function(FUNC_BOARDS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, BigInteger, BigInteger>>(
                new Callable<Tuple4<BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> groupsCreated() {
        final Function function = new Function(FUNC_GROUPSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<BigInteger, String>> groups(BigInteger param0) {
        final Function function = new Function(FUNC_GROUPS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> tasksCreated() {
        final Function function = new Function(FUNC_TASKSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<BoardAddedEventResponse> getBoardAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDADDED_EVENT, transactionReceipt);
        ArrayList<BoardAddedEventResponse> responses = new ArrayList<BoardAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardAddedEventResponse typedResponse = new BoardAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardAddedEventResponse> boardAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardAddedEventResponse>() {
            @Override
            public BoardAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDADDED_EVENT, log);
                BoardAddedEventResponse typedResponse = new BoardAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardAddedEventResponse> boardAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDADDED_EVENT));
        return boardAddedEventFlowable(filter);
    }

    public List<BoardLeftEventResponse> getBoardLeftEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDLEFT_EVENT, transactionReceipt);
        ArrayList<BoardLeftEventResponse> responses = new ArrayList<BoardLeftEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardLeftEventResponse typedResponse = new BoardLeftEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.left = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardLeftEventResponse> boardLeftEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardLeftEventResponse>() {
            @Override
            public BoardLeftEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDLEFT_EVENT, log);
                BoardLeftEventResponse typedResponse = new BoardLeftEventResponse();
                typedResponse.log = log;
                typedResponse.left = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardLeftEventResponse> boardLeftEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDLEFT_EVENT));
        return boardLeftEventFlowable(filter);
    }

    public List<BoardRemovedEventResponse> getBoardRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDREMOVED_EVENT, transactionReceipt);
        ArrayList<BoardRemovedEventResponse> responses = new ArrayList<BoardRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardRemovedEventResponse typedResponse = new BoardRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.removed = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardRemovedEventResponse> boardRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardRemovedEventResponse>() {
            @Override
            public BoardRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDREMOVED_EVENT, log);
                BoardRemovedEventResponse typedResponse = new BoardRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.removed = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardRemovedEventResponse> boardRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDREMOVED_EVENT));
        return boardRemovedEventFlowable(filter);
    }

    public List<GroupAddedEventResponse> getGroupAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GROUPADDED_EVENT, transactionReceipt);
        ArrayList<GroupAddedEventResponse> responses = new ArrayList<GroupAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GroupAddedEventResponse typedResponse = new GroupAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GroupAddedEventResponse> groupAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, GroupAddedEventResponse>() {
            @Override
            public GroupAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(GROUPADDED_EVENT, log);
                GroupAddedEventResponse typedResponse = new GroupAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<GroupAddedEventResponse> groupAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GROUPADDED_EVENT));
        return groupAddedEventFlowable(filter);
    }

    public List<TaskAddedEventResponse> getTaskAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TASKADDED_EVENT, transactionReceipt);
        ArrayList<TaskAddedEventResponse> responses = new ArrayList<TaskAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TaskAddedEventResponse typedResponse = new TaskAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TaskAddedEventResponse> taskAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TaskAddedEventResponse>() {
            @Override
            public TaskAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TASKADDED_EVENT, log);
                TaskAddedEventResponse typedResponse = new TaskAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TaskAddedEventResponse> taskAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TASKADDED_EVENT));
        return taskAddedEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> addBoard(String title) {
        final Function function = new Function(
                FUNC_ADDBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addGroup(BigInteger boardId, String title) {
        final Function function = new Function(
                FUNC_ADDGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTask(BigInteger groupId, String title) {
        final Function function = new Function(
                FUNC_ADDTASK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(groupId),
                        new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>> getBoardCards() {
        final Function function = new Function(FUNC_GETBOARDCARDS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int32>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int64>>() {}, new TypeReference<DynamicArray<Int64>>() {}));
        return new RemoteCall<Tuple4<List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple4<List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple4<List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Int32>) results.get(0).getValue()),
                                convertToNative((List<Utf8String>) results.get(1).getValue()),
                                convertToNative((List<Int64>) results.get(2).getValue()),
                                convertToNative((List<Int64>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple4<String, BigInteger, BigInteger, List<BigInteger>>> getBoard(BigInteger id) {
        final Function function = new Function(FUNC_GETBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}, new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, BigInteger, List<BigInteger>>>(
                new Callable<Tuple4<String, BigInteger, BigInteger, List<BigInteger>>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, List<BigInteger>>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                convertToNative((List<Int32>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteCall<List> getGroupsIndices(BigInteger boardId) {
        final Function function = new Function(FUNC_GETGROUPSINDICES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple6<String, List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<BigInteger>>> getGroup(BigInteger groupId) {
        final Function function = new Function(FUNC_GETGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(groupId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Int32>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int64>>() {}, new TypeReference<DynamicArray<Int64>>() {}));
        return new RemoteCall<Tuple6<String, List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple6<String, List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple6<String, List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<BigInteger>>(
                                (String) results.get(0).getValue(),
                                convertToNative((List<Int32>) results.get(1).getValue()),
                                convertToNative((List<Utf8String>) results.get(2).getValue()),
                                convertToNative((List<Utf8String>) results.get(3).getValue()),
                                convertToNative((List<Int64>) results.get(4).getValue()),
                                convertToNative((List<Int64>) results.get(5).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple4<String, String, BigInteger, BigInteger>> getTask(BigInteger taskId) {
        final Function function = new Function(FUNC_GETTASK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple4<String, String, BigInteger, BigInteger>>(
                new Callable<Tuple4<String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> removeBoardFromUser(String userId, BigInteger boardId) {
        final Function function = new Function(
                FUNC_REMOVEBOARDFROMUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId),
                        new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeUserFromBoard(String userId, BigInteger boardId) {
        final Function function = new Function(
                FUNC_REMOVEUSERFROMBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId),
                        new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> leaveBoard(BigInteger id) {
        final Function function = new Function(
                FUNC_LEAVEBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> eraseBoard(BigInteger id) {
        final Function function = new Function(
                FUNC_ERASEBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Smart load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Smart(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Smart load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Smart(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Smart load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Smart(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Smart load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Smart(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Smart> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Smart.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Smart> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Smart.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Smart> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Smart.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Smart> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Smart.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class BoardAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class BoardLeftEventResponse {
        public Log log;

        public Boolean left;
    }

    public static class BoardRemovedEventResponse {
        public Log log;

        public Boolean removed;
    }

    public static class GroupAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class TaskAddedEventResponse {
        public Log log;

        public BigInteger id;
    }
}
