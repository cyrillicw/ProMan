package com.onudapps.proman.contracts;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Int32;
import org.web3j.abi.datatypes.generated.Int64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.*;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class Smart extends Contract {
    private static final String BINARY = "0x6080604052600080546001608060020a031916905534801561002057600080fd5b50613d7e806100306000396000f3fe6080604052600436106101c05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166280f19781146101c55780631274290214610284578063381468e8146103d0578063385e17db146104b657806339d2ff17146104e557806347278ab61461064b57806354272d94146106815780635bc4ec8b146106af5780635be13890146106c45780636320b3f81461078157806365fca2d9146107bd5780636a5baba1146107f95780637837620f146108c55780637b1b664a146109015780637dc03f74146109a957806380caf07d146109be57806384dc388614610a7b578063884eaab514610afc57806389406afe14610b115780639e4cda4314610b47578063ac85f7f714610b70578063adcfb4fc14610c9a578063b772cbb914610d4d578063bf4a246714610d89578063c6168e1114610e46578063cb9d8c5c14610e82578063ce8823a514610f35578063cfcef2d214610ff2578063d7d3d02b1461101f578063dd583bce14611055578063de0040be1461108b578063e7783717146110c7578063eac25d81146110fe578063f60c505f14611163578063f8f3378e1461119f578063fc0a5e91146111cc575b600080fd5b3480156101d157600080fd5b506101f2600480360360208110156101e857600080fd5b503560030b6111f9565b60405180806020018460070b60070b81526020018360070b60070b8152602001828103825285818151815260200191508051906020019080838360005b8381101561024757818101518382015260200161022f565b50505050905090810190601f1680156102745780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561029057600080fd5b506102b1600480360360208110156102a757600080fd5b503560030b611430565b604051808860030b60030b815260200180602001806020018760070b60070b81526020018660070b60070b81526020018560030b60030b81526020018460030b60030b8152602001838103835289818151815260200191508051906020019080838360005b8381101561032e578181015183820152602001610316565b50505050905090810190601f16801561035b5780820380516001836020036101000a031916815260200191505b5083810382528851815288516020918201918a019080838360005b8381101561038e578181015183820152602001610376565b50505050905090810190601f1680156103bb5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b3480156103dc57600080fd5b506103fd600480360360208110156103f357600080fd5b503560030b6115ac565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561043e578181015183820152602001610426565b50505050905090810190601f16801561046b5780820380516001836020036101000a031916815260200191505b508381038252845181528451602091820191808701910280838360005b838110156104a0578181015183820152602001610488565b5050505090500194505050505060405180910390f35b3480156104c257600080fd5b506104e3600480360360208110156104d957600080fd5b503560030b611762565b005b3480156104f157600080fd5b506105126004803603602081101561050857600080fd5b503560030b6117b7565b6040518080602001806020018660070b60070b81526020018560070b60070b815260200180602001848103845289818151815260200191508051906020019080838360005b8381101561056f578181015183820152602001610557565b50505050905090810190601f16801561059c5780820380516001836020036101000a031916815260200191505b5084810383528851815288516020918201918a019080838360005b838110156105cf5781810151838201526020016105b7565b50505050905090810190601f1680156105fc5780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b83811015610631578181015183820152602001610619565b505050509050019850505050505050505060405180910390f35b34801561065757600080fd5b506104e36004803603604081101561066e57600080fd5b50803560030b906020013560070b611a58565b34801561068d57600080fd5b50610696611af6565b60408051600392830b90920b8252519081900360200190f35b3480156106bb57600080fd5b50610696611b07565b3480156106d057600080fd5b506104e3600480360360408110156106e757600080fd5b813560030b919081019060408101602082013564010000000081111561070c57600080fd5b82018360208201111561071e57600080fd5b8035906020019184600183028401116401000000008311171561074057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611b10945050505050565b34801561078d57600080fd5b506104e3600480360360408110156107a457600080fd5b50600160a060020a03813516906020013560030b611b8a565b3480156107c957600080fd5b506104e3600480360360408110156107e057600080fd5b50803560030b9060200135600160a060020a0316611d06565b34801561080557600080fd5b506108266004803603602081101561081c57600080fd5b503560030b611f25565b604051808560030b60030b8152602001806020018460070b60070b81526020018360070b60070b8152602001828103825285818151815260200191508051906020019080838360005b8381101561088757818101518382015260200161086f565b50505050905090810190601f1680156108b45780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156108d157600080fd5b506104e3600480360360408110156108e857600080fd5b50803560030b9060200135600160a060020a0316611fed565b34801561090d57600080fd5b506109346004803603602081101561092457600080fd5b5035600160a060020a0316612210565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561096e578181015183820152602001610956565b50505050905090810190601f16801561099b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109b557600080fd5b506106966122da565b3480156109ca57600080fd5b506104e3600480360360408110156109e157600080fd5b813560030b9190810190604081016020820135640100000000811115610a0657600080fd5b820183602082011115610a1857600080fd5b80359060200191846001830284011164010000000083111715610a3a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506122ef945050505050565b348015610a8757600080fd5b50610aa860048036036020811015610a9e57600080fd5b503560030b6125d5565b604051808460030b60030b8152602001806020018360030b60030b8152602001828103825284818151815260200191508051906020019080838360008381101561024757818101518382015260200161022f565b348015610b0857600080fd5b5061069661268a565b348015610b1d57600080fd5b506104e360048036036040811015610b3457600080fd5b50803560030b906020013560070b6126a3565b348015610b5357600080fd5b50610b5c612715565b604080519115158252519081900360200190f35b348015610b7c57600080fd5b50610b9d60048036036020811015610b9357600080fd5b503560030b61272c565b60405180806020018660070b60070b81526020018560070b60070b81526020018060200180602001848103845289818151815260200191508051906020019080838360005b83811015610bfa578181015183820152602001610be2565b50505050905090810190601f168015610c275780820380516001836020036101000a031916815260200191505b508481038352865181528651602091820191808901910280838360005b83811015610c5c578181015183820152602001610c44565b505050509050018481038252858181518152602001915080519060200190602002808383600083811015610631578181015183820152602001610619565b348015610ca657600080fd5b506104e360048036036020811015610cbd57600080fd5b810190602081018135640100000000811115610cd857600080fd5b820183602082011115610cea57600080fd5b80359060200191846001830284011164010000000083111715610d0c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612976945050505050565b348015610d5957600080fd5b506104e360048036036040811015610d7057600080fd5b50803560030b9060200135600160a060020a0316612a7b565b348015610d9557600080fd5b506104e360048036036040811015610dac57600080fd5b813560030b9190810190604081016020820135640100000000811115610dd157600080fd5b820183602082011115610de357600080fd5b80359060200191846001830284011164010000000083111715610e0557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612acb945050505050565b348015610e5257600080fd5b506104e360048036036040811015610e6957600080fd5b50803560030b9060200135600160a060020a0316612b3f565b348015610e8e57600080fd5b506104e360048036036020811015610ea557600080fd5b810190602081018135640100000000811115610ec057600080fd5b820183602082011115610ed257600080fd5b80359060200191846001830284011164010000000083111715610ef457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612c45945050505050565b348015610f4157600080fd5b506104e360048036036040811015610f5857600080fd5b813560030b9190810190604081016020820135640100000000811115610f7d57600080fd5b820183602082011115610f8f57600080fd5b80359060200191846001830284011164010000000083111715610fb157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612e98945050505050565b348015610ffe57600080fd5b506104e36004803603602081101561101557600080fd5b503560030b613067565b34801561102b57600080fd5b506104e36004803603604081101561104257600080fd5b50803560030b906020013560070b61324a565b34801561106157600080fd5b506104e36004803603604081101561107857600080fd5b50803560030b906020013560070b6132cf565b34801561109757600080fd5b506104e3600480360360408110156110ae57600080fd5b50600160a060020a03813516906020013560030b61335a565b3480156110d357600080fd5b506104e3600480360360408110156110ea57600080fd5b508035600390810b9160200135900b613491565b34801561110a57600080fd5b50611113613582565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561114f578181015183820152602001611137565b505050509050019250505060405180910390f35b34801561116f57600080fd5b506104e36004803603604081101561118657600080fd5b50803560030b9060200135600160a060020a031661360c565b3480156111ab57600080fd5b50611113600480360360208110156111c257600080fd5b503560030b6137d7565b3480156111d857600080fd5b506104e3600480360360208110156111ef57600080fd5b503560030b61389a565b600381810b900b600090815260016020908152604080832033845260050190915281205460609190819060ff16151561123157600080fd5b6112396139e9565b600385810b810b600090815260016020818152604092839020835160c0810185528154860b860b90950b855280830180548551600261010096831615969096026000190190911694909404601f8101849004840285018401909552848452909385830193928301828280156112ef5780601f106112c4576101008083540402835291602001916112ef565b820191906000526020600020905b8154815290600101906020018083116112d257829003601f168201915b505050505081526020016002820160009054906101000a900460070b60070b60070b81526020016002820160089054906101000a900460070b60070b60070b81526020016003820180548060200260200160405190810160405280929190818152602001828054801561138b57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161136d575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561140957602002820191906000526020600020906000905b82829054906101000a900460030b60030b815260200190600401906020826003010492830192600103820291508084116113d25790505b50505091909252505050602081015160408201516060909201519097919650945092505050565b6003602081815260009283526040928390208054600180830180548751600261010094831615949094026000190190911692909204601f81018690048602830186019097528682529190940b949193929091908301828280156114d45780601f106114a9576101008083540402835291602001916114d4565b820191906000526020600020905b8154815290600101906020018083116114b757829003601f168201915b50505060028085018054604080516020601f60001961010060018716150201909416959095049283018590048502810185019091528181529596959450909250908301828280156115665780601f1061153b57610100808354040283529160200191611566565b820191906000526020600020905b81548152906001019060200180831161154957829003601f168201915b5050506003938401549293600784810b9468010000000000000000810490910b93507001000000000000000000000000000000008104820b925060a060020a9004900b87565b600381810b810b600090815260026020818152604080842090920154840b80850b90940b8352600181528183203384526005019052902054606091829160ff1615156115f757600080fd5b6115ff613a1d565b600385810b810b60009081526002602081815260409283902083516080810185528154860b860b90950b85526001808201805486516101009382161593909302600019011694909404601f810184900484028201840190955284815290938583019391928301828280156116b45780601f10611689576101008083540402835291602001916116b4565b820191906000526020600020905b81548152906001019060200180831161169757829003601f168201915b50505091835250506002820154600390810b810b810b6020808401919091529083018054604080518285028101850182528281529401939283018282801561174157602002820191906000526020600020906000905b82829054906101000a900460030b60030b8152602001906004019060208260030104928301926001038202915080841161170a5790505b50505091909252505050602081015160609091015190945092505050915091565b61176c8133612b3f565b6117763382611b8a565b611780338261335a565b604080516001815290517ff8fc2d154446e315941a028488baf3204c5ef227c4ac71004de6446b7630d0929181900360200190a150565b600381810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b8352600182528083203384526005019091528120546060928392918291849160ff16151561180c57600080fd5b611814613a43565b600388810b810b60009081526020828152604091829020825161010080820185528254860b860b90950b8152600180830180548651600293821615909802600019011691909104601f810185900485028701850190955284865290949193858401938301828280156118c75780601f1061189c576101008083540402835291602001916118c7565b820191906000526020600020905b8154815290600101906020018083116118aa57829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156119595780601f1061192e57610100808354040283529160200191611959565b820191906000526020600020905b81548152906001019060200180831161193c57829003601f168201915b5050509183525050600382810154600781810b810b810b602080860191909152680100000000000000008304820b820b90910b6040808601919091527001000000000000000000000000000000008304840b840b840b606086015260a060020a909204830b830b90920b608084015260048401805482518185028101850190935280835260a0909401939192909190830182828015611a2157602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611a03575b50505091909252505050602081015160408201516060830151608084015160e090940151929c919b50995091975095509350505050565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff161515611aa357600080fd5b50600391820b820b6000908152602083905260409020909101805460079290920b67ffffffffffffffff1668010000000000000000026fffffffffffffffff000000000000000019909216919091179055565b600054640100000000900460030b81565b60005460030b81565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff161515611b5b57600080fd5b600383810b810b60009081526020918252604090208351611b8492600190920191850190613a86565b50505050565b600160a060020a03821660009081526004602052604081209080805b6002840154811015611c07578460030b8460020182815481101515611bc757fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b1415611bff5780915060019250611c07565b600101611ba6565b508115611cff57600181015b6002840154811015611ca95760028401805482908110611c2f57fe5b90600052602060002090600891828204019190066004029054906101000a900460030b8460020160018303815481101515611c6657fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360030b63ffffffff1602179055508080600101915050611c13565b506002830180546000198101908110611cbe57fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff021916905582600201805480919060019003611cfd9190613b04565b505b5050505050565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff161515611d5157600080fd5b600383810b810b600090815260209182526040808220600160a060020a0386168352600490935290205460ff168015611da55750600160a060020a038316600090815260058201602052604090205460ff16155b15611ee457600160a060020a038316600081815260058301602090815260408220805460ff19166001908117909155600485018054918201815583529120018054600160a060020a0319169091179055611dff8284611fed565b7f420b21d138b5666e8964e731ce196d5633578d864852da0bc47b2d4616e00a1b6004600085600160a060020a0316600160a060020a031681526020019081526020016000206001016040518080602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611ed15780601f10611ea657610100808354040283529160200191611ed1565b820191906000526020600020905b815481529060010190602001808311611eb457829003601f168201915b50509250505060405180910390a1611b84565b60408051602080825260009082015290517f420b21d138b5666e8964e731ce196d5633578d864852da0bc47b2d4616e00a1b9181900360600190a150505050565b600160208181526000928352604092839020805481840180548651600261010097831615979097026000190190911695909504601f810185900485028601850190965285855260039190910b94919392909190830182828015611fc95780601f10611f9e57610100808354040283529160200191611fc9565b820191906000526020600020905b815481529060010190602001808311611fac57829003601f168201915b50505060029093015491925050600781810b91680100000000000000009004900b84565b600382810b900b600090815260016020908152604080832033845260050190915290205460ff16151561201f57600080fd5b600160a060020a03811660009081526004602052604090205460ff1680156120745750600382810b900b6000908152600160209081526040808320600160a060020a038516845260050190915290205460ff16155b156121d057600382810b80820b600090815260016020818152604080842095860180548085018255908552828520018054600160a060020a038916600160a060020a0319909116811790915580855260059096018252808420805460ff19168417905560048083528185206002808201805480880182559088528588206008820401805463ffffffff9a8b16600790931690950261010090810a9283029a909202199094169890981790925596909452805182815295830180549384161590950260001901909216929092049184018290527fd6d8568f98742611058036b67bd50f6f100a78c721c7c24bdc98c41f0bc7215693918291820190849080156121bd5780601f10612192576101008083540402835291602001916121bd565b820191906000526020600020905b8154815290600101906020018083116121a057829003601f168201915b50509250505060405180910390a161220c565b60408051602080825260009082015290517fd6d8568f98742611058036b67bd50f6f100a78c721c7c24bdc98c41f0bc721569181900360600190a15b5050565b60606004600083600160a060020a0316600160a060020a031681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122ce5780601f106122a3576101008083540402835291602001916122ce565b820191906000526020600020905b8154815290600101906020018083116122b157829003601f168201915b50505050509050919050565b60005468010000000000000000900460030b81565b600382810b810b600090815260026020818152604080842090920154840b80850b90940b835260018152818320338452600501905290205460ff16151561233557600080fd5b61233d613a43565b50604080516101008082018352600080546c0100000000000000000000000090819004600390810b810b80865260208087018a815288518083018a52868152888a01526000196060890181905260808901528b840b60a089018190528a850b60c08a015289518781528084018b5260e08a0152840b865260028252888620840180546001808201835591885283882060088204018054600790921660040290990a63ffffffff818102199092169582160294909417909755855494909404830b830b830b8552828152969093208551815463ffffffff1916920b909316178255518051939485949293612437939085019290910190613a86565b5060408201518051612453916002840191602090910190613a86565b50606082015160038083018054608086015160a087015160c0880151850b63ffffffff90811660a060020a0277ffffffff0000000000000000000000000000000000000000199290960b167001000000000000000000000000000000000273ffffffff0000000000000000000000000000000019600793840b67ffffffffffffffff90811668010000000000000000026fffffffffffffffff0000000000000000199990950b1667ffffffffffffffff1990951694909417969096169190911791909116939093179290921617905560e0820151805161253d916004840191602090910190613b3d565b5050600054604080516c01000000000000000000000000909204600390810b810b900b8252517f6be49f4d1712d0fb22da3e4c1396a3e80a71bca29e577dbef8001fb4e5f15be792509081900360200190a15050600080546fffffffff00000000000000000000000019811663ffffffff6c0100000000000000000000000092839004600390810b600101900b169091021790555050565b6002602081815260009283526040928390208054600180830180548751601f6000199483161561010002949094019091169690960491820185900485028601850190965280855260039190910b949193928301828280156126775780601f1061264c57610100808354040283529160200191612677565b820191906000526020600020905b81548152906001019060200180831161265a57829003601f168201915b5050506002909301549192505060030b83565b6000546c01000000000000000000000000900460030b81565b600382810b900b600090815260016020908152604080832033845260050190915290205460ff1615156126d557600080fd5b600391820b90910b6000908152600160205260409020600201805460079290920b67ffffffffffffffff1667ffffffffffffffff19909216919091179055565b3360009081526004602052604090205460ff165b90565b600381810b900b60009081526001602090815260408083203384526005019091528120546060919081908390819060ff16151561276857600080fd5b6127706139e9565b600387810b810b600090815260016020818152604092839020835160c0810185528154860b860b90950b855280830180548551600261010096831615969096026000190190911694909404601f8101849004840285018401909552848452909385830193928301828280156128265780601f106127fb57610100808354040283529160200191612826565b820191906000526020600020905b81548152906001019060200180831161280957829003601f168201915b505050505081526020016002820160009054906101000a900460070b60070b60070b81526020016002820160089054906101000a900460070b60070b60070b8152602001600382018054806020026020016040519081016040528092919081815260200182805480156128c257602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116128a4575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561294057602002820191906000526020600020906000905b82829054906101000a900460030b60030b815260200190600401906020826003010492830192600103820291508084116129095790505b5050509190925250505060208101516040820151606083015160a0840151608090940151929b919a509850919650945092505050565b3360009081526004602052604090205460ff161515612a435760408051606081018252600180825260208083018581528451600080825281840187528587019190915233815260048352949094208351815460ff1916901515178155935180519394936129ea938501929190910190613a86565b5060408201518051612a06916002840191602090910190613b9e565b5050604080516001815290517f0dffc5dd87b3acdefad39a6649ed27bf4830bcf3374c54d5140fdd15eebd553992509081900360200190a1612a78565b604080516000815290517f0dffc5dd87b3acdefad39a6649ed27bf4830bcf3374c54d5140fdd15eebd55399181900360200190a15b50565b600382810b900b600090815260016020908152604080832033845260050190915290205460ff161515612aad57600080fd5b612ab78282612b3f565b612ac18183611b8a565b61220c818361335a565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff161515612b1657600080fd5b600383810b810b60009081526020918252604090208351611b8492600290920191850190613a86565b600382810b900b600090815260016020908152604080832033845260050190915290205460ff161515612b7157600080fd5b600382810b900b6000908152600160205260408120905b6004820154811015611b84576000600260008460040184815481101515612bab57fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b60030b8152602001908152602001600020905060008090505b6003820154811015612c3b57612c338260030182815481101515612c0a57fe5b90600052602060002090600891828204019190066004029054906101000a900460030b8661360c565b600101612bea565b5050600101612b88565b6040805160c081018252600080546401000000009004600390810b810b808452602080850187815260001986880181905260608701528651858152808301885260808701528651858152808301885260a087015291830b84526001808252959093208451815463ffffffff191663ffffffff9190940b1692909217825551805193949193612cdb93928501929190910190613a86565b506040820151600282018054606085015167ffffffffffffffff19909116600793840b67ffffffffffffffff908116919091176fffffffffffffffff00000000000000001916680100000000000000009290940b160291909117905560808201518051612d52916003840191602090910190613b3d565b5060a08201518051612d6e916004840191602090910190613b9e565b50506000805464010000000090819004600390810b810b810b8352600160208181526040808620840180548085018255908752828720018054600160a060020a031916339081179091558654869004850b850b850b87528187209087526005018252808620805460ff1916841790556004808352818720875460029091018054958601815588528388206008860401805491889004870b870b63ffffffff90811660079097169093026101000a9586029290950219161790925593548151939004820b820b90910b8252517faedc68e9a9eb366b79839e0b46c3f2d1a3b9eec9c785ec3bd3fcb50f2322aa6d93509081900390910190a1506000805467ffffffff0000000019811663ffffffff64010000000092839004600390810b600101900b16909102179055565b600382810b900b600090815260016020908152604080832033845260050190915290205460ff161515612eca57600080fd5b612ed2613a1d565b5060408051608081018252600080546801000000000000000090819004600390810b810b808552602080860188815289840b87890181905288518781528084018a526060890152840b865260018083528887206004908101805480840182559089528489206008820401805460079092169092026101000a63ffffffff8181021990921696821602959095179055865495909504840b840b840b865260028252969094208551815463ffffffff1916930b90911691909117815593518051939485949093612fa4938501920190613a86565b50604082015160028201805463ffffffff191663ffffffff600393840b1617905560608301518051612fdc9284019160200190613b9e565b50506000546040805168010000000000000000909204600390810b810b900b8252517facdbba31b030f49229d93f7468a1df7733eeb8f4b8f707dbafa0b7a53dfe212592509081900360200190a15050600080546bffffffff000000000000000019811663ffffffff6801000000000000000092839004600390810b600101900b1690910217905550565b600381810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff1615156130b257600080fd5b600382810b810b6000908152602082815260408083208401547001000000000000000000000000000000009004840b840b90930b8252600290529081209080805b6003840154811015613154578560030b846003018281548110151561311457fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b141561314c5780915060019250613154565b6001016130f3565b508115611cff57600181015b60038401548110156131f6576003840180548290811061317c57fe5b90600052602060002090600891828204019190066004029054906101000a900460030b84600301600183038154811015156131b357fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360030b63ffffffff1602179055508080600101915050613160565b50600383018054600019810190811061320b57fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff021916905582600301805480919060019003611cfd9190613b04565b600382810b900b600090815260016020908152604080832033845260050190915290205460ff16151561327c57600080fd5b600391820b90910b6000908152600160205260409020600201805460079290920b67ffffffffffffffff1668010000000000000000026fffffffffffffffff000000000000000019909216919091179055565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff16151561331a57600080fd5b50600391820b820b6000908152602083905260409020909101805460079290920b67ffffffffffffffff1667ffffffffffffffff19909216919091179055565b600381810b900b60009081526001602052604081209080805b60038401548110156133c95785600160a060020a0316846003018281548110151561339a57fe5b600091825260209091200154600160a060020a031614156133c157809150600192506133c9565b600101613373565b508115611cff57600181015b600384015481101561344e57600384018054829081106133f157fe5b600091825260209091200154600385018054600160a060020a0390921691600019840190811061341d57fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556001016133d5565b50600383018054600019810190811061346357fe5b60009182526020909120018054600160a060020a031916905560038301805490611cfd906000198301613c4c565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff1615156134dc57600080fd5b6134e583613067565b50600391820b80830b6000908152602084815260408083208601805473ffffffff00000000000000000000000000000000191670010000000000000000000000000000000063ffffffff97890b8881169190910291909117909155860b835260028252822090940180546001810182559082529390206008840401805460079094166004026101000a808402199094169290911692909202179055565b3360009081526004602090815260409182902060020180548351818402810184019094528084526060939283018282801561360257602002820191906000526020600020906000905b82829054906101000a900460030b60030b815260200190600401906020826003010492830192600103820291508084116135cb5790505b5050505050905090565b600382810b810b60009081526020828152604080832084015460a060020a9004840b80850b90940b83526001825280832033845260050190915290205460ff16151561365757600080fd5b600383810b810b600090815260209182526040808220600160a060020a03861683526005810190935290205460ff1615611b8457600160a060020a03831660009081526005820160205260408120805460ff1916905580805b60048401548110156137065785600160a060020a031684600401828154811015156136d757fe5b600091825260209091200154600160a060020a031614156136fe5780915060019250613706565b6001016136b0565b508115611cfd57600181015b600484015481101561378b576004840180548290811061372e57fe5b600091825260209091200154600485018054600160a060020a0390921691600019840190811061375a57fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600101613712565b5060048301805460001981019081106137a057fe5b60009182526020909120018054600160a060020a0319169055600483018054906137ce906000198301613c4c565b50505050505050565b600381810b900b600090815260016020908152604080832033845260050190915290205460609060ff16151561380c57600080fd5b600382810b900b600090815260016020908152604091829020600401805483518184028101840190945280845290918301828280156122ce57602002820191906000526020600020906000905b82829054906101000a900460030b60030b81526020019060040190602082600301049283019260010382029150808411613859575094979650505050505050565b600381810b900b6000908152600160209081526040808320338452600581019092529091205460ff16156139b15760005b600382015481101561390e5761390682600301828154811015156138eb57fe5b600091825260209091200154600160a060020a031684611b8a565b6001016138cb565b50600382810b900b60009081526001602081905260408220805463ffffffff19168155919061393f90830182613c70565b6002820180546fffffffffffffffffffffffffffffffff19169055613968600383016000613cb4565b613976600483016000613cd2565b5050604080516001815290517f2ba7d88b70a50545812b72874f1c186473c9d50d28e9e907f3ed2a7bc5baed459181900360200190a161220c565b604080516000815290517f2ba7d88b70a50545812b72874f1c186473c9d50d28e9e907f3ed2a7bc5baed459181900360200190a15050565b6040805160c0810182526000808252606060208301819052928201819052828201526080810182905260a081019190915290565b604080516080810182526000808252606060208301819052928201528181019190915290565b604080516101008101825260008082526060602083018190529282018390528282018190526080820181905260a0820181905260c082015260e081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613ac757805160ff1916838001178555613af4565b82800160010185558215613af4579182015b82811115613af4578251825591602001919060010190613ad9565b50613b00929150613cf3565b5090565b815481835581811115613b38576007016008900481600701600890048360005260206000209182019101613b389190613cf3565b505050565b828054828255906000526020600020908101928215613b92579160200282015b82811115613b925782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190613b5d565b50613b00929150613d0d565b82805482825590600052602060002090600701600890048101928215613c405791602002820160005b83821115613c0e57835183826101000a81548163ffffffff021916908360030b63ffffffff1602179055509260200192600401602081600301049283019260010302613bc7565b8015613c3e5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302613c0e565b505b50613b00929150613d31565b815481835581811115613b3857600083815260209020613b38918101908301613cf3565b50805460018160011615610100020316600290046000825580601f10613c965750612a78565b601f016020900490600052602060002090810190612a789190613cf3565b5080546000825590600052602060002090810190612a789190613cf3565b508054600082556007016008900490600052602060002090810190612a7891905b61272991905b80821115613b005760008155600101613cf9565b61272991905b80821115613b00578054600160a060020a0319168155600101613d13565b61272991905b80821115613b0057805463ffffffff19168155600101613d3756fea165627a7a7230582051b2b61c2c101c8b54c9c40b4ea3bcaae2d1fdb62e2052d1c4e949448853f7390029";

    public static final String FUNC_TASKS = "tasks";

    public static final String FUNC_BOARDSCREATED = "boardsCreated";

    public static final String FUNC_BOARDSCOUNT = "boardsCount";

    public static final String FUNC_BOARDS = "boards";

    public static final String FUNC_GROUPSCREATED = "groupsCreated";

    public static final String FUNC_GROUPS = "groups";

    public static final String FUNC_TASKSCREATED = "tasksCreated";

    public static final String FUNC_ADDBOARD = "addBoard";

    public static final String FUNC_GETUSERNICK = "getUserNick";

    public static final String FUNC_ADDGROUP = "addGroup";

    public static final String FUNC_ADDTASK = "addTask";

    public static final String FUNC_SETTASKDESCRIPTION = "setTaskDescription";

    public static final String FUNC_SETTASKTITLE = "setTaskTitle";

    public static final String FUNC_SETTASKGROUP = "setTaskGroup";

    public static final String FUNC_REMOVETASKFROMGROUP = "removeTaskFromGroup";

    public static final String FUNC_SETTASKSTART = "setTaskStart";

    public static final String FUNC_SETTASKFINISH = "setTaskFinish";

    public static final String FUNC_SETBOARDSTART = "setBoardStart";

    public static final String FUNC_SETBOARDFINISH = "setBoardFinish";

    public static final String FUNC_ADDBOARDPARTICIPANT = "addBoardParticipant";

    public static final String FUNC_REMOVEBOARDPARTICIPANT = "removeBoardParticipant";

    public static final String FUNC_SIGNIN = "signIn";

    public static final String FUNC_SIGNUP = "signUp";

    public static final String FUNC_GETBOARD = "getBoard";

    public static final String FUNC_GETBOARDCARD = "getBoardCard";

    public static final String FUNC_GETBOARDSINDICES = "getBoardsIndices";

    public static final String FUNC_GETGROUPSINDICES = "getGroupsIndices";

    public static final String FUNC_GETGROUP = "getGroup";

    public static final String FUNC_GETTASK = "getTask";

    public static final String FUNC_REMOVEBOARDFROMUSER = "removeBoardFromUser";

    public static final String FUNC_REMOVEUSERFROMBOARD = "removeUserFromBoard";

    public static final String FUNC_ADDTASKPARTICIPANT = "addTaskParticipant";

    public static final String FUNC_REMOVETASKUSER = "removeTaskUser";

    public static final String FUNC_REMOVETASKUSERSOFBOARD = "removeTaskUsersOfBoard";

    public static final String FUNC_LEAVEBOARD = "leaveBoard";

    public static final String FUNC_ERASEBOARD = "eraseBoard";

    public static final Event BOARDADDED_EVENT = new Event("boardAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event SIGNEDUP_EVENT = new Event("signedUp",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event BOARDLEFT_EVENT = new Event("boardLeft",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event BOARDREMOVED_EVENT = new Event("boardRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event GROUPADDED_EVENT = new Event("groupAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event BOARDPARTICIPANTADDED_EVENT = new Event("boardParticipantAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event TASKPARTICIPANTADDED_EVENT = new Event("taskParticipantAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event TASKADDED_EVENT = new Event("taskAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event TXCOMMITED_EVENT = new Event("txCommited",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected Smart(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Smart(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Smart(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Smart(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger>> tasks(BigInteger param0) {
        final Function function = new Function(FUNC_TASKS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}, new TypeReference<Int32>() {}, new TypeReference<Int32>() {}));
        return new RemoteCall<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> boardsCreated() {
        final Function function = new Function(FUNC_BOARDSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> boardsCount() {
        final Function function = new Function(FUNC_BOARDSCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple4<BigInteger, String, BigInteger, BigInteger>> boards(BigInteger param0) {
        final Function function = new Function(FUNC_BOARDS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, BigInteger, BigInteger>>(
                new Callable<Tuple4<BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> groupsCreated() {
        final Function function = new Function(FUNC_GROUPSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<BigInteger, String, BigInteger>> groups(BigInteger param0) {
        final Function function = new Function(FUNC_GROUPS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int32>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, BigInteger>>(
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> tasksCreated() {
        final Function function = new Function(FUNC_TASKSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<BoardAddedEventResponse> getBoardAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDADDED_EVENT, transactionReceipt);
        ArrayList<BoardAddedEventResponse> responses = new ArrayList<BoardAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardAddedEventResponse typedResponse = new BoardAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardAddedEventResponse> boardAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardAddedEventResponse>() {
            @Override
            public BoardAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDADDED_EVENT, log);
                BoardAddedEventResponse typedResponse = new BoardAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardAddedEventResponse> boardAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDADDED_EVENT));
        return boardAddedEventFlowable(filter);
    }

    public List<SignedUpEventResponse> getSignedUpEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNEDUP_EVENT, transactionReceipt);
        ArrayList<SignedUpEventResponse> responses = new ArrayList<SignedUpEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignedUpEventResponse typedResponse = new SignedUpEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignedUpEventResponse> signedUpEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SignedUpEventResponse>() {
            @Override
            public SignedUpEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNEDUP_EVENT, log);
                SignedUpEventResponse typedResponse = new SignedUpEventResponse();
                typedResponse.log = log;
                typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SignedUpEventResponse> signedUpEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNEDUP_EVENT));
        return signedUpEventFlowable(filter);
    }

    public List<BoardLeftEventResponse> getBoardLeftEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDLEFT_EVENT, transactionReceipt);
        ArrayList<BoardLeftEventResponse> responses = new ArrayList<BoardLeftEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardLeftEventResponse typedResponse = new BoardLeftEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.left = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardLeftEventResponse> boardLeftEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardLeftEventResponse>() {
            @Override
            public BoardLeftEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDLEFT_EVENT, log);
                BoardLeftEventResponse typedResponse = new BoardLeftEventResponse();
                typedResponse.log = log;
                typedResponse.left = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardLeftEventResponse> boardLeftEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDLEFT_EVENT));
        return boardLeftEventFlowable(filter);
    }

    public List<BoardRemovedEventResponse> getBoardRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDREMOVED_EVENT, transactionReceipt);
        ArrayList<BoardRemovedEventResponse> responses = new ArrayList<BoardRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardRemovedEventResponse typedResponse = new BoardRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.removed = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardRemovedEventResponse> boardRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardRemovedEventResponse>() {
            @Override
            public BoardRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDREMOVED_EVENT, log);
                BoardRemovedEventResponse typedResponse = new BoardRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.removed = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardRemovedEventResponse> boardRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDREMOVED_EVENT));
        return boardRemovedEventFlowable(filter);
    }

    public List<GroupAddedEventResponse> getGroupAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GROUPADDED_EVENT, transactionReceipt);
        ArrayList<GroupAddedEventResponse> responses = new ArrayList<GroupAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GroupAddedEventResponse typedResponse = new GroupAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GroupAddedEventResponse> groupAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, GroupAddedEventResponse>() {
            @Override
            public GroupAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(GROUPADDED_EVENT, log);
                GroupAddedEventResponse typedResponse = new GroupAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<GroupAddedEventResponse> groupAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GROUPADDED_EVENT));
        return groupAddedEventFlowable(filter);
    }

    public List<BoardParticipantAddedEventResponse> getBoardParticipantAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDPARTICIPANTADDED_EVENT, transactionReceipt);
        ArrayList<BoardParticipantAddedEventResponse> responses = new ArrayList<BoardParticipantAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardParticipantAddedEventResponse typedResponse = new BoardParticipantAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nick = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardParticipantAddedEventResponse> boardParticipantAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardParticipantAddedEventResponse>() {
            @Override
            public BoardParticipantAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDPARTICIPANTADDED_EVENT, log);
                BoardParticipantAddedEventResponse typedResponse = new BoardParticipantAddedEventResponse();
                typedResponse.log = log;
                typedResponse.nick = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardParticipantAddedEventResponse> boardParticipantAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDPARTICIPANTADDED_EVENT));
        return boardParticipantAddedEventFlowable(filter);
    }

    public List<TaskParticipantAddedEventResponse> getTaskParticipantAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TASKPARTICIPANTADDED_EVENT, transactionReceipt);
        ArrayList<TaskParticipantAddedEventResponse> responses = new ArrayList<TaskParticipantAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TaskParticipantAddedEventResponse typedResponse = new TaskParticipantAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nick = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TaskParticipantAddedEventResponse> taskParticipantAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TaskParticipantAddedEventResponse>() {
            @Override
            public TaskParticipantAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TASKPARTICIPANTADDED_EVENT, log);
                TaskParticipantAddedEventResponse typedResponse = new TaskParticipantAddedEventResponse();
                typedResponse.log = log;
                typedResponse.nick = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TaskParticipantAddedEventResponse> taskParticipantAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TASKPARTICIPANTADDED_EVENT));
        return taskParticipantAddedEventFlowable(filter);
    }

    public List<TaskAddedEventResponse> getTaskAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TASKADDED_EVENT, transactionReceipt);
        ArrayList<TaskAddedEventResponse> responses = new ArrayList<TaskAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TaskAddedEventResponse typedResponse = new TaskAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TaskAddedEventResponse> taskAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TaskAddedEventResponse>() {
            @Override
            public TaskAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TASKADDED_EVENT, log);
                TaskAddedEventResponse typedResponse = new TaskAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TaskAddedEventResponse> taskAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TASKADDED_EVENT));
        return taskAddedEventFlowable(filter);
    }

    public List<TxCommitedEventResponse> getTxCommitedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TXCOMMITED_EVENT, transactionReceipt);
        ArrayList<TxCommitedEventResponse> responses = new ArrayList<TxCommitedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TxCommitedEventResponse typedResponse = new TxCommitedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commited = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TxCommitedEventResponse> txCommitedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TxCommitedEventResponse>() {
            @Override
            public TxCommitedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TXCOMMITED_EVENT, log);
                TxCommitedEventResponse typedResponse = new TxCommitedEventResponse();
                typedResponse.log = log;
                typedResponse.commited = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TxCommitedEventResponse> txCommitedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TXCOMMITED_EVENT));
        return txCommitedEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> addBoard(String title) {
        final Function function = new Function(
                FUNC_ADDBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getUserNick(String user) {
        final Function function = new Function(FUNC_GETUSERNICK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addGroup(BigInteger boardId, String title) {
        final Function function = new Function(
                FUNC_ADDGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTask(BigInteger groupId, String title) {
        final Function function = new Function(
                FUNC_ADDTASK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(groupId),
                        new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTaskDescription(BigInteger taskId, String description) {
        final Function function = new Function(
                FUNC_SETTASKDESCRIPTION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.Utf8String(description)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTaskTitle(BigInteger taskId, String title) {
        final Function function = new Function(
                FUNC_SETTASKTITLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTaskGroup(BigInteger taskId, BigInteger groupId) {
        final Function function = new Function(
                FUNC_SETTASKGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.generated.Int32(groupId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeTaskFromGroup(BigInteger taskId) {
        final Function function = new Function(
                FUNC_REMOVETASKFROMGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTaskStart(BigInteger taskId, BigInteger time) {
        final Function function = new Function(
                FUNC_SETTASKSTART,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.generated.Int64(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTaskFinish(BigInteger taskId, BigInteger time) {
        final Function function = new Function(
                FUNC_SETTASKFINISH,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.generated.Int64(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBoardStart(BigInteger boardId, BigInteger time) {
        final Function function = new Function(
                FUNC_SETBOARDSTART,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.generated.Int64(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBoardFinish(BigInteger boardId, BigInteger time) {
        final Function function = new Function(
                FUNC_SETBOARDFINISH,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.generated.Int64(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addBoardParticipant(BigInteger boardId, String user) {
        final Function function = new Function(
                FUNC_ADDBOARDPARTICIPANT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.Address(user)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeBoardParticipant(BigInteger boardId, String user) {
        final Function function = new Function(
                FUNC_REMOVEBOARDPARTICIPANT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.Address(user)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> signIn() {
        final Function function = new Function(FUNC_SIGNIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> signUp(String nick) {
        final Function function = new Function(
                FUNC_SIGNUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nick)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<String, BigInteger, BigInteger, List<BigInteger>, List<String>>> getBoard(BigInteger id) {
        final Function function = new Function(FUNC_GETBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}, new TypeReference<DynamicArray<Int32>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, BigInteger, List<BigInteger>, List<String>>>(
                new Callable<Tuple5<String, BigInteger, BigInteger, List<BigInteger>, List<String>>>() {
                    @Override
                    public Tuple5<String, BigInteger, BigInteger, List<BigInteger>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, BigInteger, List<BigInteger>, List<String>>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                convertToNative((List<Int32>) results.get(3).getValue()),
                                convertToNative((List<Address>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple3<String, BigInteger, BigInteger>> getBoardCard(BigInteger id) {
        final Function function = new Function(FUNC_GETBOARDCARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple3<String, BigInteger, BigInteger>>(
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<List> getBoardsIndices() {
        final Function function = new Function(FUNC_GETBOARDSINDICES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getGroupsIndices(BigInteger boardId) {
        final Function function = new Function(FUNC_GETGROUPSINDICES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple2<String, List<BigInteger>>> getGroup(BigInteger groupId) {
        final Function function = new Function(FUNC_GETGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(groupId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<Tuple2<String, List<BigInteger>>>(
                new Callable<Tuple2<String, List<BigInteger>>>() {
                    @Override
                    public Tuple2<String, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, List<BigInteger>>(
                                (String) results.get(0).getValue(),
                                convertToNative((List<Int32>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple5<String, String, BigInteger, BigInteger, List<String>>> getTask(BigInteger taskId) {
        final Function function = new Function(FUNC_GETTASK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple5<String, String, BigInteger, BigInteger, List<String>>>(
                new Callable<Tuple5<String, String, BigInteger, BigInteger, List<String>>>() {
                    @Override
                    public Tuple5<String, String, BigInteger, BigInteger, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, BigInteger, BigInteger, List<String>>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                convertToNative((List<Address>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> removeBoardFromUser(String userId, BigInteger boardId) {
        final Function function = new Function(
                FUNC_REMOVEBOARDFROMUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId),
                        new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeUserFromBoard(String userId, BigInteger boardId) {
        final Function function = new Function(
                FUNC_REMOVEUSERFROMBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId),
                        new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTaskParticipant(BigInteger taskId, String user) {
        final Function function = new Function(
                FUNC_ADDTASKPARTICIPANT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.Address(user)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeTaskUser(BigInteger taskId, String userId) {
        final Function function = new Function(
                FUNC_REMOVETASKUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.Address(userId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeTaskUsersOfBoard(BigInteger boardId, String userId) {
        final Function function = new Function(
                FUNC_REMOVETASKUSERSOFBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.Address(userId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> leaveBoard(BigInteger id) {
        final Function function = new Function(
                FUNC_LEAVEBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> eraseBoard(BigInteger id) {
        final Function function = new Function(
                FUNC_ERASEBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Smart load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Smart(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Smart load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Smart(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Smart load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Smart(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Smart load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Smart(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Smart> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Smart.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Smart> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Smart.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Smart> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Smart.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Smart> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Smart.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class BoardAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class SignedUpEventResponse {
        public Log log;

        public Boolean success;
    }

    public static class BoardLeftEventResponse {
        public Log log;

        public Boolean left;
    }

    public static class BoardRemovedEventResponse {
        public Log log;

        public Boolean removed;
    }

    public static class GroupAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class BoardParticipantAddedEventResponse {
        public Log log;

        public String nick;
    }

    public static class TaskParticipantAddedEventResponse {
        public Log log;

        public String nick;
    }

    public static class TaskAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class TxCommitedEventResponse {
        public Log log;

        public Boolean commited;
    }
}
