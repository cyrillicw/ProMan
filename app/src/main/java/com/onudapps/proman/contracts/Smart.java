package com.onudapps.proman.contracts;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Int32;
import org.web3j.abi.datatypes.generated.Int64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class Smart extends Contract {
    private static final String BINARY = "0x6080604052600080546001608060020a031916905534801561002057600080fd5b5061279c806100306000396000f3fe6080604052600436106101065763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630d60436d811461010b5780631274290214610139578063381468e81461016a578063385e17db1461019c57806339d2ff17146101be57806354272d94146101ee5780635bc4ec8b146102105780636320b3f8146102255780636a5baba1146102455780637dc03f741461027557806380caf07d1461028a57806384dc3886146102aa578063884eaab5146102d8578063ac85f7f7146102ed578063cb9d8c5c1461031d578063ce8823a51461033d578063de0040be1461035d578063f8f3378e1461037d578063fc0a5e91146103aa575b600080fd5b34801561011757600080fd5b506101206103ca565b6040516101309493929190612488565b60405180910390f35b34801561014557600080fd5b50610159610154366004612273565b6107e3565b604051610130959493929190612566565b34801561017657600080fd5b5061018a610185366004612273565b61093d565b604051610130969594939291906125b6565b3480156101a857600080fd5b506101bc6101b7366004612273565b610e4a565b005b3480156101ca57600080fd5b506101de6101d9366004612273565b610e99565b6040516101309493929190612676565b3480156101fa57600080fd5b5061020361104d565b60405161013091906124f3565b34801561021c57600080fd5b5061020361105e565b34801561023157600080fd5b506101bc610240366004612239565b611067565b34801561025157600080fd5b50610265610260366004612273565b6111e3565b6040516101309493929190612521565b34801561028157600080fd5b506102036112ab565b34801561029657600080fd5b506101bc6102a5366004612299565b6112c0565b3480156102b657600080fd5b506102ca6102c5366004612273565b6113e6565b604051610130929190612501565b3480156102e457600080fd5b50610203611492565b3480156102f957600080fd5b5061030d610308366004612273565b6114ab565b6040516101309493929190612637565b34801561032957600080fd5b506101bc6103383660046122e1565b6116b9565b34801561034957600080fd5b506101bc610358366004612299565b61199f565b34801561036957600080fd5b506101bc610378366004612239565b611b17565b34801561038957600080fd5b5061039d610398366004612273565b611c68565b6040516101309190612477565b3480156103b657600080fd5b506101bc6103c5366004612273565b611cfa565b60608060608060606004600033600160a060020a0316600160a060020a0316815260200190815260200160002060010180549050604051908082528060200260200182016040528015610427578160200160208202803883390190505b5033600090815260046020908152604091829020600101548251818152818302810190920190925291925060609190801561047657816020015b60608152602001906001900390816104615790505b503360009081526004602090815260409182902060010154825181815281830281019092019092529192506060919080156104bb578160200160208202803883390190505b50336000908152600460209081526040918290206001015482518181528183028101909201909252919250606091908015610500578160200160208202803883390190505b50905060005b336000908152600460205260409020600101548110156107d457336000908152600460205260408120600190810180549192918490811061054357fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b60030b815260200190815260200160002060000160009054906101000a900460030b858281518110151561059957fe5b600392830b90920b602092830290910182015233600090815260049091526040812060019081018054919291849081106105cf57fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b60030b81526020019081526020016000206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561069d5780601f106106725761010080835404028352916020019161069d565b820191906000526020600020905b81548152906001019060200180831161068057829003601f168201915b505050505084828151811015156106b057fe5b602090810290910181019190915233600090815260049091526040812060019081018054919291849081106106e157fe5b6000918252602080832060088304015460046007938416026101000a9004600390810b810b900b845283019390935260409091019020600201548451910b9084908390811061072c57fe5b600792830b90920b6020928302909101820152336000908152600490915260408120600190810180549192918490811061076257fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b60030b815260200190815260200160002060020160089054906101000a900460070b82828151811015156107b857fe5b600792830b90920b602092830290910190910152600101610506565b50929791965094509092509050565b6003602081815260009283526040928390208054600180830180548751600261010094831615949094026000190190911692909204601f81018690048602830186019097528682529190940b949193929091908301828280156108875780601f1061085c57610100808354040283529160200191610887565b820191906000526020600020905b81548152906001019060200180831161086a57829003601f168201915b50505060028085018054604080516020601f60001961010060018716150201909416959095049283018590048502810185019091528181529596959450909250908301828280156109195780601f106108ee57610100808354040283529160200191610919565b820191906000526020600020905b8154815290600101906020018083116108fc57829003601f168201915b50505060039093015491925050600781810b91680100000000000000009004900b85565b60608060608060608061094e611e52565b600388810b810b60009081526002602081815260409283902083516060810185528154860b860b90950b85526001808201805486516101009382161593909302600019011694909404601f81018490048402820184019095528481529093858301939192830182828015610a035780601f106109d857610100808354040283529160200191610a03565b820191906000526020600020905b8154815290600101906020018083116109e657829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610a8157602002820191906000526020600020906000905b82829054906101000a900460030b60030b81526020019060040190602082600301049283019260010382029150808411610a4a5790505b50505050508152505090506060816040015151604051908082528060200260200182016040528015610ac757816020015b6060815260200190600190039081610ab25790505b5090506060826040015151604051908082528060200260200182016040528015610b0557816020015b6060815260200190600190039081610af05790505b5090506060836040015151604051908082528060200260200182016040528015610b39578160200160208202803883390190505b5090506060846040015151604051908082528060200260200182016040528015610b6d578160200160208202803883390190505b50905060005b856040015151811015610e2a5760036000876040015183815181101515610b9657fe5b9060200190602002015160030b60030b81526020019081526020016000206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c4b5780601f10610c2057610100808354040283529160200191610c4b565b820191906000526020600020905b815481529060010190602001808311610c2e57829003601f168201915b50505050508582815181101515610c5e57fe5b602090810290910101526040860151805160039160009184908110610c7f57fe5b9060200190602002015160030b60030b81526020019081526020016000206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d345780601f10610d0957610100808354040283529160200191610d34565b820191906000526020600020905b815481529060010190602001808311610d1757829003601f168201915b50505050508482815181101515610d4757fe5b602090810290910101526040860151805160039160009184908110610d6857fe5b9060200190602002015160030b60030b815260200190815260200160002060030160009054906101000a900460070b8382815181101515610da557fe5b9060200190602002019060070b908160070b8152505060036000876040015183815181101515610dd157fe5b9060200190602002015160030b60030b815260200190815260200160002060030160089054906101000a900460070b8282815181101515610e0e57fe5b600792830b90920b602092830290910190910152600101610b73565b506020850151604090950151949c949b5092995090975095509350915050565b610e543382611067565b610e5e3382611b17565b7ff8fc2d154446e315941a028488baf3204c5ef227c4ac71004de6446b7630d0926001604051610e8e91906124df565b60405180910390a150565b606080600080610ea7611e77565b600386810b810b60009081526020828152604091829020825160a0810184528154850b850b90940b8452600180820180548551600261010094831615949094026000190190911692909204601f8101859004850283018501909552848252919385840193919291830182828015610f5f5780601f10610f3457610100808354040283529160200191610f5f565b820191906000526020600020905b815481529060010190602001808311610f4257829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f81018390048302850183019091528084529381019390830182828015610ff15780601f10610fc657610100808354040283529160200191610ff1565b820191906000526020600020905b815481529060010190602001808311610fd457829003601f168201915b505050918352505060039190910154600781810b810b810b60208085019190915268010000000000000000909204810b810b900b6040928301528201519082015160608301516080909301519199909850919650945092505050565b600054640100000000900460030b81565b60005460030b81565b600160a060020a03821660009081526004602052604081209080805b60018401548110156110e4578460030b84600101828154811015156110a457fe5b90600052602060002090600891828204019190066004029054906101000a900460030b60030b14156110dc57809150600192506110e4565b600101611083565b5081156111dc57600181015b6001840154811015611186576001840180548290811061110c57fe5b90600052602060002090600891828204019190066004029054906101000a900460030b846001016001830381548110151561114357fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360030b63ffffffff16021790555080806001019150506110f0565b50600183018054600019810190811061119b57fe5b90600052602060002090600891828204019190066004026101000a81549063ffffffff0219169055826001018054809190600190036111da9190611ea6565b505b5050505050565b600160208181526000928352604092839020805481840180548651600261010097831615979097026000190190911695909504601f810185900485028601850190965285855260039190910b949193929091908301828280156112875780601f1061125c57610100808354040283529160200191611287565b820191906000526020600020905b81548152906001019060200180831161126a57829003601f168201915b50505060029093015491925050600781810b91680100000000000000009004900b84565b60005468010000000000000000900460030b81565b6112c8611e77565b506040805160a081018252600080546c0100000000000000000000000090819004600390810b810b8085526020808601889052865180820188528581528688015260001960608701819052608087015288830b830b855260028082528786200180546001810182559086529085206008820401805460079092166004026101000a63ffffffff8181021990931692909316929092021790559154935192937f6be49f4d1712d0fb22da3e4c1396a3e80a71bca29e577dbef8001fb4e5f15be793611399939290910490910b906124f3565b60405180910390a15050600080546fffffffff00000000000000000000000019811663ffffffff6c0100000000000000000000000092839004600390810b600101900b1690910217905550565b6002602081815260009283526040928390208054600180830180548751601f6000199483161561010002949094019091169690960491820185900485028601850190965280855260039190910b949193928301828280156114885780601f1061145d57610100808354040283529160200191611488565b820191906000526020600020905b81548152906001019060200180831161146b57829003601f168201915b5050505050905082565b6000546c01000000000000000000000000900460030b81565b606060008060606114ba611edf565b600386810b810b600090815260016020818152604092839020835160c0810185528154860b860b90950b855280830180548551600261010096831615969096026000190190911694909404601f8101849004840285018401909552848452909385830193928301828280156115705780601f1061154557610100808354040283529160200191611570565b820191906000526020600020905b81548152906001019060200180831161155357829003601f168201915b505050505081526020016002820160009054906101000a900460070b60070b60070b81526020016002820160089054906101000a900460070b60070b60070b81526020016003820180548060200260200160405190810160405280929190818152602001828054801561160c57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116115ee575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561168a57602002820191906000526020600020906000905b82829054906101000a900460030b60030b815260200190600401906020826003010492830192600103820291508084116116535790505b5050509190925250505060208101516040820151606083015160a0909301519199909850919650945092505050565b6040805160c081018252600080546401000000009004600390810b810b808452602080850187815260001986880181905260608701528651858152808301885260808701528651858152808301885260a087015291830b84526001808252959093208451815463ffffffff191663ffffffff9190940b169290921782555180519394919361174f93928501929190910190611f13565b506040820151600282018054606085015167ffffffffffffffff19909116600793840b67ffffffffffffffff908116919091176fffffffffffffffff00000000000000001916680100000000000000009290940b1602919091179055608082015180516117c6916003840191602090910190611f91565b5060a082015180516117e2916004840191602090910190611fff565b50506000805464010000000090819004600390810b810b810b835260016020818152604080862084018054808501825590875282872001805473ffffffffffffffffffffffffffffffffffffffff191633908117909155865495909504840b840b90930b855282852093855260059093018352818420805460ff19169091179055600490915290205460ff16151590506118cd5760408051808201825260018082528251600080825260208083018652808501928352338252600481529490208351815460ff191690151517815590518051939491936118c9938501929190910190611fff565b5050505b336000908152600460208181526040808420845460019182018054928301815586529285206008820401805464010000000094859004600390810b810b63ffffffff90811660079095169097026101000a93840296909302191694909417909355925492517faedc68e9a9eb366b79839e0b46c3f2d1a3b9eec9c785ec3bd3fcb50f2322aa6d936119649392900490910b906124f3565b60405180910390a1506000805467ffffffff0000000019811663ffffffff64010000000092839004600390810b600101900b16909102179055565b6119a7611e52565b5060408051606081018252600080546801000000000000000090819004600390810b810b8085526020808601888152875186815280830189528789015289840b840b865260018083528887206004908101805480840182559089528489206008820401805460079092169092026101000a63ffffffff8181021990921696821602959095179055865495909504840b840b840b865260028252969094208551815463ffffffff1916930b90911691909117815593518051939485949093611a72938501920190611f13565b5060408201518051611a8e916002840191602090910190611fff565b50506000546040517facdbba31b030f49229d93f7468a1df7733eeb8f4b8f707dbafa0b7a53dfe21259250611ad29168010000000000000000900460030b906124f3565b60405180910390a15050600080546bffffffff000000000000000019811663ffffffff6801000000000000000092839004600390810b600101900b1690910217905550565b600381810b900b60009081526001602052604081209080805b6003840154811015611b865785600160a060020a03168460030182815481101515611b5757fe5b600091825260209091200154600160a060020a03161415611b7e5780915060019250611b86565b600101611b30565b5081156111dc57600181015b6003840154811015611c185760038401805482908110611bae57fe5b600091825260209091200154600385018054600160a060020a03909216916000198401908110611bda57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600101611b92565b506003830180546000198101908110611c2d57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff19169055600383018054906111da9060001983016120ad565b600381810b900b600090815260016020908152604091829020600401805483518184028101840190945280845260609392830182828015611cee57602002820191906000526020600020906000905b82829054906101000a900460030b60030b81526020019060040190602082600301049283019260010382029150808411611cb75790505b50505050509050919050565b600381810b900b6000908152600160209081526040808320338452600581019092529091205460ff1615611e155760005b6003820154811015611d6e57611d668260030182815481101515611d4b57fe5b600091825260209091200154600160a060020a031684611067565b600101611d2b565b50600382810b900b60009081526001602081905260408220805463ffffffff191681559190611d9f908301826120d1565b6002820180546fffffffffffffffffffffffffffffffff19169055611dc8600383016000612118565b611dd6600483016000612136565b50507f2ba7d88b70a50545812b72874f1c186473c9d50d28e9e907f3ed2a7bc5baed456001604051611e0891906124df565b60405180910390a1611e4e565b7f2ba7d88b70a50545812b72874f1c186473c9d50d28e9e907f3ed2a7bc5baed456000604051611e4591906124df565b60405180910390a15b5050565b606060405190810160405280600060030b815260200160608152602001606081525090565b6040805160a0810182526000808252606060208301819052928201839052918101829052608081019190915290565b815481835581811115611eda576007016008900481600701600890048360005260206000209182019101611eda9190612157565b505050565b6040805160c0810182526000808252606060208301819052928201819052828201526080810182905260a081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f5457805160ff1916838001178555611f81565b82800160010185558215611f81579182015b82811115611f81578251825591602001919060010190611f66565b50611f8d929150612157565b5090565b828054828255906000526020600020908101928215611ff3579160200282015b82811115611ff3578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178255602090920191600190910190611fb1565b50611f8d929150612174565b828054828255906000526020600020906007016008900481019282156120a15791602002820160005b8382111561206f57835183826101000a81548163ffffffff021916908360030b63ffffffff1602179055509260200192600401602081600301049283019260010302612028565b801561209f5782816101000a81549063ffffffff021916905560040160208160030104928301926001030261206f565b505b50611f8d9291506121a5565b815481835581811115611eda57600083815260209020611eda918101908301612157565b50805460018160011615610100020316600290046000825580601f106120f75750612115565b601f0160209004906000526020600020908101906121159190612157565b50565b50805460008255906000526020600020908101906121159190612157565b50805460008255600701600890049060005260206000209081019061211591905b61217191905b80821115611f8d576000815560010161215d565b90565b61217191905b80821115611f8d57805473ffffffffffffffffffffffffffffffffffffffff1916815560010161217a565b61217191905b80821115611f8d57805463ffffffff191681556001016121ab565b60006121d28235612711565b9392505050565b60006121d282356126f9565b6000601f820183136121f657600080fd5b8135612209612204826126c2565b61269b565b9150808252602083016020830185838301111561222557600080fd5b61223083828461271c565b50505092915050565b6000806040838503121561224c57600080fd5b600061225885856121c6565b9250506020612269858286016121d9565b9150509250929050565b60006020828403121561228557600080fd5b600061229184846121d9565b949350505050565b600080604083850312156122ac57600080fd5b60006122b885856121d9565b925050602083013567ffffffffffffffff8111156122d557600080fd5b612269858286016121e5565b6000602082840312156122f357600080fd5b813567ffffffffffffffff81111561230a57600080fd5b612291848285016121e5565b6000612321826126f0565b808452602084019350612333836126ea565b60005b8281101561236357612349868351612430565b612352826126ea565b602096909601959150600101612336565b5093949350505050565b6000612378826126f0565b80845260208401935061238a836126ea565b60005b82811015612363576123a0868351612439565b6123a9826126ea565b60209690960195915060010161238d565b60006123c5826126f0565b808452602084019350836020820285016123de856126ea565b60005b848110156124155783830388526123f9838351612442565b9250612404826126ea565b6020989098019791506001016123e1565b50909695505050505050565b61242a816126f4565b82525050565b61242a816126f9565b61242a816126ff565b600061244d826126f0565b808452612461816020860160208601612728565b61246a81612758565b9093016020019392505050565b602080825281016121d28184612316565b608080825281016124998187612316565b905081810360208301526124ad81866123ba565b905081810360408301526124c1818561236d565b905081810360608301526124d5818461236d565b9695505050505050565b602081016124ed8284612421565b92915050565b602081016124ed8284612430565b6040810161250f8285612430565b81810360208301526122918184612442565b6080810161252f8287612430565b81810360208301526125418186612442565b90506125506040830185612439565b61255d6060830184612439565b95945050505050565b60a081016125748288612430565b81810360208301526125868187612442565b9050818103604083015261259a8186612442565b90506125a96060830185612439565b6124d56080830184612439565b60c080825281016125c78189612442565b905081810360208301526125db8188612316565b905081810360408301526125ef81876123ba565b9050818103606083015261260381866123ba565b90508181036080830152612617818561236d565b905081810360a083015261262b818461236d565b98975050505050505050565b608080825281016126488187612442565b90506126576020830186612439565b6126646040830185612439565b81810360608301526124d58184612316565b608080825281016126878187612442565b905081810360208301526125418186612442565b60405181810167ffffffffffffffff811182821017156126ba57600080fd5b604052919050565b600067ffffffffffffffff8211156126d957600080fd5b506020601f91909101601f19160190565b60200190565b5190565b151590565b60030b90565b60070b90565b600160a060020a031690565b60006124ed82612705565b82818337506000910152565b60005b8381101561274357818101518382015260200161272b565b83811115612752576000848401525b50505050565b601f01601f19169056fea265627a7a72305820d553e21bcfa381e121ecf1eae6c22576775461c69908847198d120beb89f40166c6578706572696d656e74616cf50037";

    public static final String FUNC_TASKS = "tasks";

    public static final String FUNC_BOARDSCREATED = "boardsCreated";

    public static final String FUNC_BOARDSCOUNT = "boardsCount";

    public static final String FUNC_BOARDS = "boards";

    public static final String FUNC_GROUPSCREATED = "groupsCreated";

    public static final String FUNC_GROUPS = "groups";

    public static final String FUNC_TASKSCREATED = "tasksCreated";

    public static final String FUNC_ADDBOARD = "addBoard";

    public static final String FUNC_ADDGROUP = "addGroup";

    public static final String FUNC_ADDTASK = "addTask";

    public static final String FUNC_GETBOARDCARDS = "getBoardCards";

    public static final String FUNC_GETBOARD = "getBoard";

    public static final String FUNC_GETGROUPSINDICES = "getGroupsIndices";

    public static final String FUNC_GETGROUP = "getGroup";

    public static final String FUNC_GETTASK = "getTask";

    public static final String FUNC_REMOVEBOARDFROMUSER = "removeBoardFromUser";

    public static final String FUNC_REMOVEUSERFROMBOARD = "removeUserFromBoard";

    public static final String FUNC_LEAVEBOARD = "leaveBoard";

    public static final String FUNC_ERASEBOARD = "eraseBoard";

    public static final Event BOARDADDED_EVENT = new Event("boardAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event BOARDLEFT_EVENT = new Event("boardLeft",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event BOARDREMOVED_EVENT = new Event("boardRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event GROUPADDED_EVENT = new Event("groupAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event TASKADDED_EVENT = new Event("taskAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    @Deprecated
    protected Smart(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Smart(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Smart(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Smart(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple5<BigInteger, String, String, BigInteger, BigInteger>> tasks(BigInteger param0) {
        final Function function = new Function(FUNC_TASKS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple5<BigInteger, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple5<BigInteger, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> boardsCreated() {
        final Function function = new Function(FUNC_BOARDSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> boardsCount() {
        final Function function = new Function(FUNC_BOARDSCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple4<BigInteger, String, BigInteger, BigInteger>> boards(BigInteger param0) {
        final Function function = new Function(FUNC_BOARDS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, BigInteger, BigInteger>>(
                new Callable<Tuple4<BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> groupsCreated() {
        final Function function = new Function(FUNC_GROUPSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<BigInteger, String>> groups(BigInteger param0) {
        final Function function = new Function(FUNC_GROUPS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> tasksCreated() {
        final Function function = new Function(FUNC_TASKSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<BoardAddedEventResponse> getBoardAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDADDED_EVENT, transactionReceipt);
        ArrayList<BoardAddedEventResponse> responses = new ArrayList<BoardAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardAddedEventResponse typedResponse = new BoardAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardAddedEventResponse> boardAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardAddedEventResponse>() {
            @Override
            public BoardAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDADDED_EVENT, log);
                BoardAddedEventResponse typedResponse = new BoardAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardAddedEventResponse> boardAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDADDED_EVENT));
        return boardAddedEventFlowable(filter);
    }

    public List<BoardLeftEventResponse> getBoardLeftEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDLEFT_EVENT, transactionReceipt);
        ArrayList<BoardLeftEventResponse> responses = new ArrayList<BoardLeftEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardLeftEventResponse typedResponse = new BoardLeftEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.left = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardLeftEventResponse> boardLeftEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardLeftEventResponse>() {
            @Override
            public BoardLeftEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDLEFT_EVENT, log);
                BoardLeftEventResponse typedResponse = new BoardLeftEventResponse();
                typedResponse.log = log;
                typedResponse.left = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardLeftEventResponse> boardLeftEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDLEFT_EVENT));
        return boardLeftEventFlowable(filter);
    }

    public List<BoardRemovedEventResponse> getBoardRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDREMOVED_EVENT, transactionReceipt);
        ArrayList<BoardRemovedEventResponse> responses = new ArrayList<BoardRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardRemovedEventResponse typedResponse = new BoardRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.removed = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardRemovedEventResponse> boardRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardRemovedEventResponse>() {
            @Override
            public BoardRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDREMOVED_EVENT, log);
                BoardRemovedEventResponse typedResponse = new BoardRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.removed = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardRemovedEventResponse> boardRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDREMOVED_EVENT));
        return boardRemovedEventFlowable(filter);
    }

    public List<GroupAddedEventResponse> getGroupAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GROUPADDED_EVENT, transactionReceipt);
        ArrayList<GroupAddedEventResponse> responses = new ArrayList<GroupAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GroupAddedEventResponse typedResponse = new GroupAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GroupAddedEventResponse> groupAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, GroupAddedEventResponse>() {
            @Override
            public GroupAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(GROUPADDED_EVENT, log);
                GroupAddedEventResponse typedResponse = new GroupAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<GroupAddedEventResponse> groupAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GROUPADDED_EVENT));
        return groupAddedEventFlowable(filter);
    }

    public List<TaskAddedEventResponse> getTaskAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TASKADDED_EVENT, transactionReceipt);
        ArrayList<TaskAddedEventResponse> responses = new ArrayList<TaskAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TaskAddedEventResponse typedResponse = new TaskAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TaskAddedEventResponse> taskAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TaskAddedEventResponse>() {
            @Override
            public TaskAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TASKADDED_EVENT, log);
                TaskAddedEventResponse typedResponse = new TaskAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TaskAddedEventResponse> taskAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TASKADDED_EVENT));
        return taskAddedEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> addBoard(String title) {
        final Function function = new Function(
                FUNC_ADDBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addGroup(BigInteger boardId, String title) {
        final Function function = new Function(
                FUNC_ADDGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTask(BigInteger groupId, String title) {
        final Function function = new Function(
                FUNC_ADDTASK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(groupId),
                        new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>> getBoardCards() {
        final Function function = new Function(FUNC_GETBOARDCARDS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int32>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int64>>() {}, new TypeReference<DynamicArray<Int64>>() {}));
        return new RemoteCall<Tuple4<List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple4<List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple4<List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Int32>) results.get(0).getValue()),
                                convertToNative((List<Utf8String>) results.get(1).getValue()),
                                convertToNative((List<Int64>) results.get(2).getValue()),
                                convertToNative((List<Int64>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple4<String, BigInteger, BigInteger, List<BigInteger>>> getBoard(BigInteger id) {
        final Function function = new Function(FUNC_GETBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}, new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, BigInteger, List<BigInteger>>>(
                new Callable<Tuple4<String, BigInteger, BigInteger, List<BigInteger>>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, List<BigInteger>>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                convertToNative((List<Int32>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteCall<List> getGroupsIndices(BigInteger boardId) {
        final Function function = new Function(FUNC_GETGROUPSINDICES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple6<String, List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<BigInteger>>> getGroup(BigInteger groupId) {
        final Function function = new Function(FUNC_GETGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(groupId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Int32>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int64>>() {}, new TypeReference<DynamicArray<Int64>>() {}));
        return new RemoteCall<Tuple6<String, List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple6<String, List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple6<String, List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, List<BigInteger>, List<String>, List<String>, List<BigInteger>, List<BigInteger>>(
                                (String) results.get(0).getValue(),
                                convertToNative((List<Int32>) results.get(1).getValue()),
                                convertToNative((List<Utf8String>) results.get(2).getValue()),
                                convertToNative((List<Utf8String>) results.get(3).getValue()),
                                convertToNative((List<Int64>) results.get(4).getValue()),
                                convertToNative((List<Int64>) results.get(5).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple4<String, String, BigInteger, BigInteger>> getTask(BigInteger taskId) {
        final Function function = new Function(FUNC_GETTASK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple4<String, String, BigInteger, BigInteger>>(
                new Callable<Tuple4<String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> removeBoardFromUser(String userId, BigInteger boardId) {
        final Function function = new Function(
                FUNC_REMOVEBOARDFROMUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId),
                        new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeUserFromBoard(String userId, BigInteger boardId) {
        final Function function = new Function(
                FUNC_REMOVEUSERFROMBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId),
                        new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> leaveBoard(BigInteger id) {
        final Function function = new Function(
                FUNC_LEAVEBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> eraseBoard(BigInteger id) {
        final Function function = new Function(
                FUNC_ERASEBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Smart load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Smart(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Smart load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Smart(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Smart load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Smart(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Smart load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Smart(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Smart> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Smart.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Smart> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Smart.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Smart> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Smart.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Smart> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Smart.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class BoardAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class BoardLeftEventResponse {
        public Log log;

        public Boolean left;
    }

    public static class BoardRemovedEventResponse {
        public Log log;

        public Boolean removed;
    }

    public static class GroupAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class TaskAddedEventResponse {
        public Log log;

        public BigInteger id;
    }
}
