package com.onudapps.proman.contracts;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Int32;
import org.web3j.abi.datatypes.generated.Int64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class Smart extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_TASKS = "tasks";

    public static final String FUNC_BOARDSCREATED = "boardsCreated";

    public static final String FUNC_BOARDSCOUNT = "boardsCount";

    public static final String FUNC_BOARDS = "boards";

    public static final String FUNC_GROUPSCREATED = "groupsCreated";

    public static final String FUNC_GROUPS = "groups";

    public static final String FUNC_TASKSCREATED = "tasksCreated";

    public static final String FUNC_ADDBOARD = "addBoard";

    public static final String FUNC_ADDGROUP = "addGroup";

    public static final String FUNC_ADDTASK = "addTask";

    public static final String FUNC_SETTASKSTART = "setTaskStart";

    public static final String FUNC_SETTASKFINISH = "setTaskFinish";

    public static final String FUNC_GETBOARD = "getBoard";

    public static final String FUNC_GETBOARDCARD = "getBoardCard";

    public static final String FUNC_GETBOARDSINDICES = "getBoardsIndices";

    public static final String FUNC_GETGROUPSINDICES = "getGroupsIndices";

    public static final String FUNC_GETGROUP = "getGroup";

    public static final String FUNC_GETTASK = "getTask";

    public static final String FUNC_REMOVEBOARDFROMUSER = "removeBoardFromUser";

    public static final String FUNC_REMOVEUSERFROMBOARD = "removeUserFromBoard";

    public static final String FUNC_LEAVEBOARD = "leaveBoard";

    public static final String FUNC_ERASEBOARD = "eraseBoard";

    public static final Event BOARDADDED_EVENT = new Event("boardAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event BOARDLEFT_EVENT = new Event("boardLeft",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event BOARDREMOVED_EVENT = new Event("boardRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event GROUPADDED_EVENT = new Event("groupAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event TASKADDED_EVENT = new Event("taskAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
    ;

    public static final Event TXCOMMITED_EVENT = new Event("txCommited",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected Smart(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Smart(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Smart(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Smart(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple5<BigInteger, String, String, BigInteger, BigInteger>> tasks(BigInteger param0) {
        final Function function = new Function(FUNC_TASKS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple5<BigInteger, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple5<BigInteger, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> boardsCreated() {
        final Function function = new Function(FUNC_BOARDSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> boardsCount() {
        final Function function = new Function(FUNC_BOARDSCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple4<BigInteger, String, BigInteger, BigInteger>> boards(BigInteger param0) {
        final Function function = new Function(FUNC_BOARDS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, BigInteger, BigInteger>>(
                new Callable<Tuple4<BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> groupsCreated() {
        final Function function = new Function(FUNC_GROUPSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<BigInteger, String>> groups(BigInteger param0) {
        final Function function = new Function(FUNC_GROUPS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> tasksCreated() {
        final Function function = new Function(FUNC_TASKSCREATED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<BoardAddedEventResponse> getBoardAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDADDED_EVENT, transactionReceipt);
        ArrayList<BoardAddedEventResponse> responses = new ArrayList<BoardAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardAddedEventResponse typedResponse = new BoardAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardAddedEventResponse> boardAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardAddedEventResponse>() {
            @Override
            public BoardAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDADDED_EVENT, log);
                BoardAddedEventResponse typedResponse = new BoardAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardAddedEventResponse> boardAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDADDED_EVENT));
        return boardAddedEventFlowable(filter);
    }

    public List<BoardLeftEventResponse> getBoardLeftEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDLEFT_EVENT, transactionReceipt);
        ArrayList<BoardLeftEventResponse> responses = new ArrayList<BoardLeftEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardLeftEventResponse typedResponse = new BoardLeftEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.left = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardLeftEventResponse> boardLeftEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardLeftEventResponse>() {
            @Override
            public BoardLeftEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDLEFT_EVENT, log);
                BoardLeftEventResponse typedResponse = new BoardLeftEventResponse();
                typedResponse.log = log;
                typedResponse.left = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardLeftEventResponse> boardLeftEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDLEFT_EVENT));
        return boardLeftEventFlowable(filter);
    }

    public List<BoardRemovedEventResponse> getBoardRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOARDREMOVED_EVENT, transactionReceipt);
        ArrayList<BoardRemovedEventResponse> responses = new ArrayList<BoardRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoardRemovedEventResponse typedResponse = new BoardRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.removed = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BoardRemovedEventResponse> boardRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BoardRemovedEventResponse>() {
            @Override
            public BoardRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOARDREMOVED_EVENT, log);
                BoardRemovedEventResponse typedResponse = new BoardRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.removed = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BoardRemovedEventResponse> boardRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOARDREMOVED_EVENT));
        return boardRemovedEventFlowable(filter);
    }

    public List<GroupAddedEventResponse> getGroupAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GROUPADDED_EVENT, transactionReceipt);
        ArrayList<GroupAddedEventResponse> responses = new ArrayList<GroupAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GroupAddedEventResponse typedResponse = new GroupAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GroupAddedEventResponse> groupAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, GroupAddedEventResponse>() {
            @Override
            public GroupAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(GROUPADDED_EVENT, log);
                GroupAddedEventResponse typedResponse = new GroupAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<GroupAddedEventResponse> groupAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GROUPADDED_EVENT));
        return groupAddedEventFlowable(filter);
    }

    public List<TaskAddedEventResponse> getTaskAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TASKADDED_EVENT, transactionReceipt);
        ArrayList<TaskAddedEventResponse> responses = new ArrayList<TaskAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TaskAddedEventResponse typedResponse = new TaskAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TaskAddedEventResponse> taskAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TaskAddedEventResponse>() {
            @Override
            public TaskAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TASKADDED_EVENT, log);
                TaskAddedEventResponse typedResponse = new TaskAddedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TaskAddedEventResponse> taskAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TASKADDED_EVENT));
        return taskAddedEventFlowable(filter);
    }

    public List<TxCommitedEventResponse> getTxCommitedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TXCOMMITED_EVENT, transactionReceipt);
        ArrayList<TxCommitedEventResponse> responses = new ArrayList<TxCommitedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TxCommitedEventResponse typedResponse = new TxCommitedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commited = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TxCommitedEventResponse> txCommitedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TxCommitedEventResponse>() {
            @Override
            public TxCommitedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TXCOMMITED_EVENT, log);
                TxCommitedEventResponse typedResponse = new TxCommitedEventResponse();
                typedResponse.log = log;
                typedResponse.commited = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TxCommitedEventResponse> txCommitedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TXCOMMITED_EVENT));
        return txCommitedEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> addBoard(String title) {
        final Function function = new Function(
                FUNC_ADDBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addGroup(BigInteger boardId, String title) {
        final Function function = new Function(
                FUNC_ADDGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId),
                        new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTask(BigInteger groupId, String title) {
        final Function function = new Function(
                FUNC_ADDTASK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(groupId),
                        new org.web3j.abi.datatypes.Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTaskStart(BigInteger taskId, BigInteger time) {
        final Function function = new Function(
                FUNC_SETTASKSTART,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.generated.Int64(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTaskFinish(BigInteger taskId, BigInteger time) {
        final Function function = new Function(
                FUNC_SETTASKFINISH,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId),
                        new org.web3j.abi.datatypes.generated.Int64(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<String, BigInteger, BigInteger, List<BigInteger>>> getBoard(BigInteger id) {
        final Function function = new Function(FUNC_GETBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}, new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, BigInteger, List<BigInteger>>>(
                new Callable<Tuple4<String, BigInteger, BigInteger, List<BigInteger>>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, List<BigInteger>>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                convertToNative((List<Int32>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple3<String, BigInteger, BigInteger>> getBoardCard(BigInteger id) {
        final Function function = new Function(FUNC_GETBOARDCARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple3<String, BigInteger, BigInteger>>(
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<List> getBoardsIndices() {
        final Function function = new Function(FUNC_GETBOARDSINDICES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getGroupsIndices(BigInteger boardId) {
        final Function function = new Function(FUNC_GETGROUPSINDICES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple2<String, List<BigInteger>>> getGroup(BigInteger groupId) {
        final Function function = new Function(FUNC_GETGROUP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(groupId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Int32>>() {}));
        return new RemoteCall<Tuple2<String, List<BigInteger>>>(
                new Callable<Tuple2<String, List<BigInteger>>>() {
                    @Override
                    public Tuple2<String, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, List<BigInteger>>(
                                (String) results.get(0).getValue(),
                                convertToNative((List<Int32>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple4<String, String, BigInteger, BigInteger>> getTask(BigInteger taskId) {
        final Function function = new Function(FUNC_GETTASK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(taskId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int64>() {}, new TypeReference<Int64>() {}));
        return new RemoteCall<Tuple4<String, String, BigInteger, BigInteger>>(
                new Callable<Tuple4<String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> removeBoardFromUser(String userId, BigInteger boardId) {
        final Function function = new Function(
                FUNC_REMOVEBOARDFROMUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId),
                        new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeUserFromBoard(String userId, BigInteger boardId) {
        final Function function = new Function(
                FUNC_REMOVEUSERFROMBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId),
                        new org.web3j.abi.datatypes.generated.Int32(boardId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> leaveBoard(BigInteger id) {
        final Function function = new Function(
                FUNC_LEAVEBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> eraseBoard(BigInteger id) {
        final Function function = new Function(
                FUNC_ERASEBOARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int32(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Smart load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Smart(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Smart load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Smart(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Smart load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Smart(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Smart load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Smart(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Smart> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Smart.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Smart> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Smart.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Smart> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Smart.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Smart> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Smart.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class BoardAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class BoardLeftEventResponse {
        public Log log;

        public Boolean left;
    }

    public static class BoardRemovedEventResponse {
        public Log log;

        public Boolean removed;
    }

    public static class GroupAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class TaskAddedEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class TxCommitedEventResponse {
        public Log log;

        public Boolean commited;
    }
}
